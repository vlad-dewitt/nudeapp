{
  "version": 3,
  "file": "carousel.js",
  "sourceRoot": "../../..",
  "sources": [
    "coffee/imports/tools/carousel.coffee"
  ],
  "names": [],
  "mappings": ";AAAA,OAAO,KAAP,EAAA;EAAgB,SAAhB;CAAA,MAAA;;AACA,OAAO,SAAP,MAAA;;AACA,OAAA;EACI,UADJ;EAEI,WAFJ;EAGI,UAHJ;EAII,UAJJ;EAKI,IALJ;EAMI,wBANJ;EAOI,IAPJ;CAAA,MAAA;;AAUA",
  "sourcesContent": [
    "import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport {\n    Dimensions,\n    I18nManager,\n    ScrollView,\n    StyleSheet,\n    Text,\n    TouchableWithoutFeedback,\n    View\n} from \"react-native\";\n\n`let styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignSelf: \"stretch\"\n    },\n    page: {\n        flex: 1\n    }\n});\n\nexport default class Carousel extends Component {\n\n    displayName = \"Carousel\";\n\n    static propTypes = {\n        pageStyle: PropTypes.object,\n        pageWidth: PropTypes.number,\n        children: PropTypes.oneOfType([ PropTypes.arrayOf(PropTypes.node), PropTypes.node ]).isRequired,\n        initialPage: PropTypes.number,\n        containerStyle: PropTypes.object,\n        noItemsText: PropTypes.string,\n        onPageChange: PropTypes.func,\n        sneak: PropTypes.number,\n        transitionDelay: PropTypes.number,\n        currentPage: PropTypes.number,\n        swipeThreshold: PropTypes.number\n    };\n\n    static defaultProps = {\n        initialPage: 0,\n        pageStyle: null,\n        containerStyle: null,\n        pageWidth: Window.width - 80,\n        sneak: 20,\n        noItemsText: \"Sorry, there are currently \\n no items available\",\n        transitionDelay: 0,\n        currentPage: 0,\n        swipeThreshold: 0.5\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            gap: undefined,\n            currentPage: props.currentPage,\n        };\n\n        this._scrollTimeout = null;\n\n        this._resetScrollPosition = this._resetScrollPosition.bind(this);\n        this._handleScrollEnd = this._handleScrollEnd.bind(this);\n    }\n\n    componentWillMount() {\n        this._calculateGap(this.props);\n    }\n\n    componentDidMount() {\n        this._resetScrollPosition(false);\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        this._resetScrollPosition();\n\n        this.setState({\n            currentPage: nextProps.currentPage\n        });\n\n        this._calculateGap(nextProps);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.currentPage !== this.props.currentPage) {\n            this._resetScrollPosition();\n            this._onPageChange(this.props.currentPage);\n        } else if (prevState.currentPage !== this.state.currentPage) {\n            this._resetScrollPosition();\n            this._onPageChange(this.state.currentPage);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this._scrollTimeout) {\n            clearTimeout(this._scrollTimeout);\n        }\n    }\n\n    _getPageOffset() {\n        const {\n            pageWidth,\n        } = this.props;\n\n        const {\n            gap,\n        } = this.state;\n\n        return pageWidth + gap;\n    }\n\n    _getPageScrollX(pageIndex) {\n        return pageIndex * this._getPageOffset();\n    }\n\n    _getPagesCount() {\n        return React.Children.count(this.props.children);\n    }\n\n    _resetScrollPosition(animated = true) {\n        if (this._scrollTimeout) {\n            clearTimeout(this._scrollTimeout);\n        }\n        this._scrollTimeout = setTimeout(() => {\n            this.scrollView.scrollTo({\n                x: this._getPageScrollX(this.state.currentPage),\n                y: 0,\n                animated,\n            });\n            this._scrollTimeout = null;\n        }, this.props.transitionDelay);\n    }\n\n    _calculateGap(props) {\n        const { sneak, pageWidth } = props;\n        if (pageWidth > this.props.width) {\n            // throw new Error(\"invalid pageWidth\");\n        }\n        /*\n         ------------\n        |            |\n        |-   ----   -|\n        | | |    | | |\n        | | |    | | |\n        | | |    | | |\n        |-   ----   -|\n        |^-- sneak   |\n        |         ^--- gap\n         ------------\n        */\n        const gap = (this.props.width - (2 * sneak) - pageWidth) / 2;\n        this.setState({gap: gap});\n    }\n\n    _handleScrollEnd(e) {\n        const { swipeThreshold } = this.props;\n        const { currentPage } = this.state;\n\n        const currentPageScrollX = this._getPageScrollX(currentPage);\n        const currentScrollX = e.nativeEvent.contentOffset.x;\n\n        const swiped = (currentScrollX - currentPageScrollX) / this._getPageOffset();\n\n        const pagesSwiped = Math.floor(Math.abs(swiped) + (1 - swipeThreshold)) * Math.sign(swiped);\n        const newPage = Math.max(Math.min(currentPage + pagesSwiped, this._getPagesCount() - 1), 0)\n\n        if (newPage !== currentPage) {\n            this.setState({currentPage: newPage});\n        } else {\n            this._resetScrollPosition();\n        }\n\n    };\n\n    _onPageChange(position) {\n        if (this.props.onPageChange) {\n            const currentElement = this.props.children[position];\n            this.props.onPageChange(position, currentElement);\n        }\n    }\n\n    render() {\n        const { sneak, pageWidth } = this.props;\n        const { gap } = this.state;\n        const computedStyles = StyleSheet.create({\n            scrollView: {\n                paddingLeft: sneak + gap / 2,\n                paddingRight: sneak + gap / 2\n            },\n            page: {\n                width: pageWidth,\n                justifyContent: \"center\",\n                marginLeft: gap / 2,\n                marginRight: gap / 2\n            }\n        });\n\n        // if no children render a no items dummy page without callbacks\n        let body = null;\n        if (!this.props.children) {\n            body = (\n                <TouchableWithoutFeedback>\n                    <View style={ [ styles.page, computedStyles.page, this.props.pageStyle ] }>\n                        <Text style={ styles.noItemsText }>\n                            { this.props.noItemsText }\n                        </Text>\n                    </View>\n                </TouchableWithoutFeedback>\n            );\n        }\n        else {\n            const children = Array.isArray(this.props.children) ? this.props.children : [this.props.children]\n            body = children.map((c, index) => {\n                return (\n                    <TouchableWithoutFeedback\n                        key={ index }\n                        onPress={ () => this.setState({currentPage: index}) }\n                    >\n                        <View\n                            style={ [ styles.page, computedStyles.page, this.props.pageStyle ] }\n                        >\n                            { c }\n                        </View>\n                    </TouchableWithoutFeedback>\n                );\n            });\n        }\n\n        return (\n            <View style={[ styles.container, this.props.containerStyle ]}>\n                <ScrollView\n                    automaticallyAdjustContentInsets={ false }\n                    bounces\n                    contentContainerStyle={ [ computedStyles.scrollView ] }\n                    style={{ flexDirection: (I18nManager && I18nManager.isRTL) ? 'row-reverse' : 'row' }}\n                    decelerationRate={ 0.3 }\n                    horizontal\n                    onScrollEndDrag={ this._handleScrollEnd }\n                    ref={ c => this.scrollView = c }\n                    showsHorizontalScrollIndicator={ false }\n                >\n                    { body }\n                </ScrollView>\n            </View>\n        );\n    }\n}\n`\n"
  ]
}