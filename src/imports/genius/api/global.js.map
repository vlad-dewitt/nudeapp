{
  "version": 3,
  "file": "global.js",
  "sourceRoot": "../../../..",
  "sources": [
    "coffee/imports/genius/api/global.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "export default\n\n  setInitialData: =>\n    data =\n      device_name: Constants.deviceName\n      platform: Constants.platform\n      device_id: Constants.deviceId\n\n    # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n    # console.log '(((setInitialData:'\n    # console.log data\n    # console.log 'setInitialData)))'\n    # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n\n    LocalAuth.hasHardwareAsync().then (res) =>\n      if res is yes\n        LocalAuth.supportedAuthenticationTypesAsync().then (res) =>\n          data.identity_hardware = LocalAuth.AuthenticationType[res]\n          Ambry.call 'setInitialData', data\n      else\n        data.identity_hardware = no\n        Ambry.call 'setInitialData', data\n\n    FileSystem.makeDirectoryAsync FileSystem.documentDirectory + 'media', { intermediates: yes }\n    FileSystem.makeDirectoryAsync FileSystem.documentDirectory + 'media/images', { intermediates: yes }\n    FileSystem.makeDirectoryAsync FileSystem.documentDirectory + 'media/images/original', { intermediates: yes }\n    # FileSystem.makeDirectoryAsync FileSystem.documentDirectory + 'media/images/med', { intermediates: yes }\n    # FileSystem.makeDirectoryAsync FileSystem.documentDirectory + 'media/images/sm', { intermediates: yes }\n    # FileSystem.makeDirectoryAsync FileSystem.documentDirectory + 'media/images/xsm', { intermediates: yes }\n    FileSystem.makeDirectoryAsync FileSystem.documentDirectory + 'media/videos', { intermediates: yes }\n    FileSystem.makeDirectoryAsync FileSystem.documentDirectory + 'breakins', { intermediates: yes }\n\n\n\n  checkConnection: (callback) =>\n    NetInfo.fetch().then (state) =>\n      callback state.isConnected\n\n\n\n  identify: (callback) =>\n    LocalAuth.authenticateAsync().then (res) =>\n      if res.success\n        callback yes\n      else\n        LocalAuth.authenticateAsync().then (res) =>\n          if res.success\n            callback yes\n          else\n            LocalAuth.authenticateAsync().then (res) =>\n              if res.success\n                callback yes\n              else\n                LocalAuth.authenticateAsync().then (res) =>\n                  if res.success\n                    callback yes\n                  else\n                    LocalAuth.authenticateAsync().then (res) =>\n                      if res.success\n                        callback yes\n                      else\n                        callback no\n\n\n\n  storeUser: =>\n    local_data =\n      account_created_at: new Date()\n      on_trial: no\n      device_id: Ambry.state().app.initial_data.device_id\n      breakins: []\n      allowed_until: new Date(+new Date() + 30 * 86400 * 1000)\n      trial_time_left: 30\n      forbidden_entry_until: new Date()\n      settings:\n        touch_id_enabled: no\n        auto_nude_detection: yes\n      user_first_time: yes\n\n    if Ambry.state().app.restore_user_mode\n      user_data = {\n        local_data...\n        pin: Ambry.state().app.user.full_pin\n        user_referral_code: ''\n        referral_code_used: ''\n        emails: [\n          address: Ambry.state().app.user.email\n          verified_at: null\n        ]\n      }\n\n      # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n      # console.log '(((storeUser (Ambry.state().app.restore_user_mode):'\n      # console.log user_data\n      # console.log 'storeUser)))'\n      # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n\n      await AsyncStorage.setItem 'user_data', JSON.stringify user_data\n      # await AsyncStorage.setItem 'first_launch', JSON.stringify { first_launch: no }\n      Ambry.call 'setUserFirstTime', yes\n    else\n      server_data =\n        email: Ambry.state().app.user.email or ''\n        referrer: ''\n        deviceInfo: Ambry.state().app.initial_data.device_id\n\n      API.server.createUser server_data, (res) =>\n        user_data = {\n          local_data...\n          pin: Ambry.state().app.user.full_pin\n          user_referral_code: res.user.referralCode\n          referral_code_used: res.user.referralCode\n          emails: [\n            address: Ambry.state().app.user.email\n            verified_at: null\n          ]\n        }\n\n        # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n        # console.log '(((storeUser (API.server.createUser):'\n        # console.log user_data\n        # console.log 'storeUser)))'\n        # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n\n        await AsyncStorage.setItem 'user_data', JSON.stringify user_data\n        Ambry.call 'setUserFirstTime', yes\n\n\n\n  syncUserLocally: (callback) =>\n    AsyncStorage.getItem('user_data').then (res) =>\n      # resp = await AsyncStorage.getItem 'first_launch'\n      # if resp is null\n      #   await AsyncStorage.removeItem 'user_data'\n      #   await AsyncStorage.removeItem 'media'\n      #   await AsyncStorage.removeItem 'known_media'\n      # else\n      #   resp = JSON.parse resp\n      #   if resp.first_launch\n      #     await AsyncStorage.removeItem 'user_data'\n      #     await AsyncStorage.removeItem 'media'\n      #     await AsyncStorage.removeItem 'known_media'\n\n      # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n      # console.log \"(((syncUserLocally (AsyncStorage.getItem('user_data')):\"\n      # console.log res\n      # console.log 'syncUserLocally)))'\n      # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n\n      if res is null\n        user = {\n          Ambry.state().app.user...\n          logged: no\n          data: null\n          full_pin: null\n          email: ''\n        }\n      else\n        user = {\n          Ambry.state().app.user...\n          logged: yes\n          data: JSON.parse res\n        }\n\n        # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n        # console.log \"(((syncUserLocally (res):\"\n        # console.log user\n        # console.log 'syncUserLocally)))'\n        # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n\n        API.global.syncUserOnline user, (res) =>\n          if res is 'OFFLINE'\n            Ambry.call 'setUser', user\n            if typeof callback is 'function'\n              callback if res is null then no else yes\n          else\n            Ambry.call 'setUser', user\n            if typeof callback is 'function'\n              callback if res is null then no else yes\n\n\n\n  syncUserOnline: (local_user, callback) =>\n    # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n    # console.log \"(((syncUserOnline (local_user):\"\n    # console.log local_user\n    # console.log 'syncUserOnline)))'\n    # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n    API.global.checkConnection (connected) =>\n      if connected\n        API.server.checkUser local_user.data.emails[0].address, (res) =>\n          callback 'ONLINE'\n      else\n        callback 'OFFLINE'\n\n\n\n  userSawDemo: =>\n    AsyncStorage.getItem('user_data').then (res) =>\n      user = {\n        Ambry.state().app.user...\n        data: JSON.parse res\n      }\n      user_data = user.data\n      user_data.user_first_time = no\n      # await AsyncStorage.setItem 'first_launch', JSON.stringify { first_launch: no }\n      await AsyncStorage.setItem 'user_data', JSON.stringify user_data\n      API.global.syncUserLocally()\n\n\n\n  startAppLockTimer: =>\n    locked_at = new Date()\n    Ambry.call 'setAppLockTimer', locked_at\n\n\n\n  clearAppLockTimer: =>\n    Ambry.call 'setAppLockTimer', null\n\n\n\n  setAutoNudeDetection: (value) =>\n    AsyncStorage.getItem('user_data').then (res) =>\n      updated_user_data = JSON.parse res\n      updated_user_data.settings.auto_nude_detection = value\n      await AsyncStorage.setItem 'user_data', JSON.stringify updated_user_data\n\n      if value is yes\n        API.global.syncUserLocally =>\n          API.global.startDetection()\n      else\n        API.global.syncUserLocally()\n\n\n\n  setTouchIdEnabled: (value) =>\n    AsyncStorage.getItem('user_data').then (res) =>\n      updated_user_data = JSON.parse res\n      updated_user_data.settings.touch_id_enabled = value\n      await AsyncStorage.setItem 'user_data', JSON.stringify updated_user_data\n      API.global.syncUserLocally()\n\n\n\n  addEmail: (email_address, callback) =>\n    API.server.resetEmail email_address, (res) =>\n      AsyncStorage.getItem('user_data').then (res) =>\n        updated_user_data = JSON.parse res\n        updated_user_data.emails = [\n          { address: email_address, verified_at: null }\n        ]\n        await AsyncStorage.setItem 'user_data', JSON.stringify updated_user_data\n        API.global.syncUserLocally callback\n\n\n\n  changePIN: (full_pin) =>\n    AsyncStorage.getItem('user_data').then (res) =>\n      updated_user_data = JSON.parse res\n      updated_user_data.pin = full_pin\n      await AsyncStorage.setItem 'user_data', JSON.stringify updated_user_data\n      API.global.syncUserLocally()\n\n\n\n  deleteUser: (callback) =>\n    Ambry.call 'setModalScreen', visible: yes, type: 'modal_loading'\n    API.global.removeBreakIns Ambry.state().app.user.data.breakins, =>\n      API.global.exportMedia Ambry.state().app.data.media, =>\n        API.server.deleteUser (res) =>\n          await AsyncStorage.removeItem 'user_data'\n          await AsyncStorage.removeItem 'media'\n          await AsyncStorage.removeItem 'known_media'\n          await AsyncStorage.removeItem 'last_scanning'\n\n          Ambry.call 'setUser',\n            logged: no\n            data: null\n            full_pin: null\n            email: ''\n\n          Ambry.call 'setModalScreen', visible: no, type: ''\n\n          callback()\n\n\n\n  addBreakIn: (object) =>\n    breakin_object = {\n      object...\n      id: random 'A0', 16\n      date: new Date()\n    }\n\n    next_path = FileSystem.documentDirectory + \"breakins/#{ breakin_object.id }.jpg\"\n\n    FileSystem.moveAsync\n      from: breakin_object.uri\n      to: next_path\n\n    breakin_object.uri = next_path\n\n    AsyncStorage.getItem('user_data').then (res) =>\n      user_data = JSON.parse res\n      updated_user_data = user_data\n      updated_user_data.breakins.push breakin_object\n\n      await AsyncStorage.setItem 'user_data', JSON.stringify updated_user_data\n      API.global.syncUserLocally()\n\n\n\n  removeBreakIns: (objects, callback) =>\n    AsyncStorage.getItem('user_data').then (res) =>\n      user_data = JSON.parse res\n      updated_breakins = user_data.breakins\n\n      objects.map (object, num) =>\n        object_to_remove = _.findWhere updated_breakins, { id: object.id }\n        updated_breakins = _.without updated_breakins, object_to_remove\n        FileSystem.deleteAsync object.uri, { idempotent: yes }\n\n      user_data.breakins = updated_breakins\n\n      await AsyncStorage.setItem 'user_data', JSON.stringify user_data\n\n      if callback\n        API.global.syncUserLocally callback\n      else\n        API.global.syncUserLocally()\n\n\n\n  syncMediaLocally: =>\n    AsyncStorage.getItem('media').then (res) =>\n      if res is null\n        media = []\n      else\n        media = JSON.parse res\n\n      # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n      # console.log \"(((syncMediaLocally:\"\n      # console.log res\n      # console.log 'syncMediaLocally)))'\n      # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n\n      Ambry.call 'setMediaData', media\n\n\n\n  addMedia: (options, objects, callback) =>\n    new_media_objects = []\n\n    await Promise.all objects.map await (object, num) =>\n      if object.type is 'image' or object.type is 'video'\n        static_media_object =\n          id: random 'A0', 16\n          date: new Date()\n          type: object.type\n          path: object.uri\n          width: object.width\n          height: object.height\n          filetype: if object.filename then object.filename.split('.')[object.filename.split('.').length - 1] else 'jpg'\n        # console.log 'addMedia:'\n        # console.log static_media_object\n\n        if object.type is 'image'\n          next_paths =\n            original: FileSystem.documentDirectory + \"media/images/original/#{ static_media_object.id }.jpg\"\n            # original: FileSystem.documentDirectory + \"media/images/original/#{ static_media_object.id }.#{ static_media_object.filetype }\"\n            # med: FileSystem.documentDirectory + \"media/images/med/#{ static_media_object.id }.jpg\"\n            # sm: FileSystem.documentDirectory + \"media/images/sm/#{ static_media_object.id }.jpg\"\n            # xsm: FileSystem.documentDirectory + \"media/images/xsm/#{ static_media_object.id }.jpg\"\n          specific_media_object = {}\n        else if object.type is 'video'\n          next_path = FileSystem.documentDirectory + \"media/videos/#{ static_media_object.id }.#{ static_media_object.filetype }\"\n          specific_media_object =\n            duration: object.duration\n\n        if object.type is 'image'\n          { status: FS_permission_status } = await Permissions.askAsync Permissions.CAMERA_ROLL\n          # { uri: path_med } = await ImageManipulator.manipulateAsync static_media_object.path, [{ resize: { width: 300 } }]\n          # { uri: path_sm } = await ImageManipulator.manipulateAsync static_media_object.path, [{ resize: { width: 150 } }]\n          # { uri: path_xsm } = await ImageManipulator.manipulateAsync static_media_object.path, [{ resize: { width: 50 } }]\n\n          if options.import\n            FileSystem.copyAsync { from: static_media_object.path, to: next_paths.original }\n          else\n            FileSystem.moveAsync { from: static_media_object.path, to: next_paths.original }\n          # FileSystem.moveAsync { from: path_med, to: next_paths.med }\n          # FileSystem.moveAsync { from: path_sm, to: next_paths.sm }\n          # FileSystem.moveAsync { from: path_xsm, to: next_paths.xsm }\n\n          if options.import\n            specific_media_object.library_id = object.id\n          specific_media_object.path = next_paths.original\n          # specific_media_object.path_med = next_paths.med\n          # specific_media_object.path_sm = next_paths.sm\n          # specific_media_object.path_xsm = next_paths.xsm\n        else if object.type is 'video'\n          FileSystem.copyAsync { from: static_media_object.path, to: next_path }\n          if options.import\n            specific_media_object.library_id = object.id\n          specific_media_object.path = next_path\n\n        full_media_object = {\n          static_media_object...\n          specific_media_object...\n        }\n\n        new_media_objects.push full_media_object\n\n    if new_media_objects.length > 0\n      AsyncStorage.getItem('media').then (res) =>\n        if res is null\n          media = [\n            new_media_objects...\n          ]\n        else\n          media = [\n            JSON.parse(res)...\n            new_media_objects...\n          ]\n\n        await AsyncStorage.setItem 'media', JSON.stringify media\n        API.global.syncMediaLocally()\n\n        if options.import is yes\n          Ambry.call 'setImportNotification',\n            visible: yes\n            objects: new_media_objects\n\n        if callback then callback()\n\n\n\n  removeMedia: (objects, callback) =>\n    AsyncStorage.getItem('media').then (res) =>\n      local_objects = JSON.parse res\n      updated_objects = local_objects\n\n      objects.map (object, num) =>\n        object_to_remove = _.findWhere local_objects, { id: object.id }\n        updated_objects = _.without updated_objects, object_to_remove\n        FileSystem.deleteAsync object.path, { idempotent: yes }\n        # if object.type is 'image'\n        #   FileSystem.deleteAsync object.path_med, { idempotent: yes }\n        #   FileSystem.deleteAsync object.path_sm, { idempotent: yes }\n        #   FileSystem.deleteAsync object.path_xsm, { idempotent: yes }\n\n      await AsyncStorage.setItem 'media', JSON.stringify updated_objects\n\n      API.global.syncMediaLocally()\n\n      if callback then callback()\n\n\n\n  removeMediaFromLibrary: (objects, callback) =>\n    # { status: FS_permission_status } = await Permissions.askAsync Permissions.CAMERA_ROLL\n    # if FS_permission_status is 'granted'\n    objects.map (object) =>\n      # console.log 'removeMediaFromLibrary:'\n      # console.log object\n      MediaLibrary.deleteAssetsAsync object.library_id\n    if callback then callback()\n    # else\n    #   if callback then callback()\n\n\n\n  exportMedia: (objects, callback) =>\n    { status: FS_permission_status } = await Permissions.askAsync Permissions.CAMERA_ROLL\n    if FS_permission_status is 'granted'\n\n      unknown_media_ids = []\n\n      for i in [0...objects.length]\n        object = objects[i]\n        media_content_path = await CameraRoll.saveToCameraRoll object.path\n        media_id = media_content_path.split('/')[media_content_path.split('/').length - 1]\n        unknown_media_ids.push media_id\n\n      known_media_res = await AsyncStorage.getItem 'known_media'\n      known_media = if known_media_res is null then [] else JSON.parse known_media_res\n      await AsyncStorage.setItem 'known_media', JSON.stringify [known_media..., unknown_media_ids...]\n\n      # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n      # console.log \"(((exportMedia(unknown_media_ids):\"\n      # console.log unknown_media_ids\n      # console.log 'exportMedia)))'\n      # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n\n      API.global.removeMedia objects, callback\n\n\n\n  lastScanning: (operation, options) =>\n    last_scanning_res = await AsyncStorage.getItem 'last_scanning'\n    last_scanning = if last_scanning_res is null then null else JSON.parse last_scanning_res\n\n    switch operation\n\n      when 'create'\n        AsyncStorage.setItem 'last_scanning', JSON.stringify {\n          unknown_media: options.unknown_media\n          last_scanned: -1\n          nude_photos_detected: []\n        }\n\n      when 'get'\n        last_scanning\n\n      when 'update'\n        AsyncStorage.setItem 'last_scanning', JSON.stringify {\n          last_scanning...\n          last_scanned: options.last_scanned\n          nude_photos_detected: if options.nude_photo_detected then [last_scanning.nude_photos_detected..., options.nude_photo_detected] else [last_scanning.nude_photos_detected...]\n        }\n\n      when 'complete'\n        if last_scanning\n          known_media_res = await AsyncStorage.getItem 'known_media'\n          known_media = if known_media_res is null then [] else JSON.parse known_media_res\n          unknown_media_ids = last_scanning.unknown_media.map (item) => item.id\n          AsyncStorage.setItem 'known_media', JSON.stringify [known_media..., unknown_media_ids...]\n          if last_scanning.nude_photos_detected.length > 0\n            API.global.addMedia { import: yes }, last_scanning.nude_photos_detected.map (item) =>\n              item.type = 'image'\n              item\n        else\n          AsyncStorage.removeItem 'last_scanning'\n\n      when 'finish'\n        AsyncStorage.removeItem 'last_scanning'\n\n\n\n  startDetection: =>\n    objects_per_page = 30\n    confidence_level = .0939\n\n    start_index = 0\n    nude_photos = []\n\n    Ambry.call 'setScanning',\n      active: yes\n      progress: 0\n\n    AsyncStorage.getItem('known_media').then (res) =>\n      known_media = if res is null then [] else [JSON.parse(res)...]\n      unknown_media = []\n\n      iteration = 0\n      steps_on_percent = 0\n      after = '0'\n      has_next_page = yes\n      current_number = 0\n      progress = 0\n\n      getPhotos = =>\n        MediaLibrary.getAssetsAsync\n          after: after\n          first: objects_per_page\n          mediaType: ['photo']\n          sortBy: ['creationTime']\n        .then (res) =>\n          iteration++\n          after = res.endCursor\n          processPhotos res\n\n      processPhotos = (data) =>\n        data.assets.map (asset, num) =>\n          asset_exists = known_media.indexOf(asset.id) isnt -1\n          if not asset_exists\n            unknown_media.push asset\n\n        if data.hasNextPage\n          getPhotos()\n        else\n          API.global.userSawDemo()\n\n          last_scanning = await API.global.lastScanning 'get'\n\n          if last_scanning\n            nude_photos = [last_scanning.nude_photos_detected...]\n            start_index = last_scanning.last_scanned + 1\n          else\n            API.global.lastScanning 'create',\n              unknown_media: unknown_media\n\n          # console.log '(unknown_media.length): ' + unknown_media.length\n\n          if unknown_media.length > 0\n            progress = 1\n            steps_on_percent = (100 - progress) / unknown_media.length\n            if last_scanning\n              progress = progress + (steps_on_percent * start_index)\n            Ambry.call 'setScanning',\n              active: yes\n              progress: progress\n\n            # console.log 'for i in ->:'\n            # console.log [start_index...unknown_media.length]\n\n            for i in [start_index...unknown_media.length]\n              scanned_image = await API.global.scanPhoto unknown_media[i]\n              # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n              # console.log \"(((processPhotos (scanned_image):\"\n              # console.log scanned_image\n              # console.log 'processPhotos)))'\n              # console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'\n\n              progress = progress + steps_on_percent\n              Ambry.call 'setScanning',\n                active: if progress.toFixed(0) is 100 or progress > 100 then no else yes\n                progress: progress\n\n              if scanned_image.scan_result > confidence_level\n                nude_photos.push scanned_image\n                await API.global.lastScanning 'update',\n                  last_scanned: i\n                  nude_photo_detected: scanned_image\n              else\n                await API.global.lastScanning 'update',\n                  last_scanned: i\n\n            Ambry.call 'setScanning',\n              active: no\n              progress: 100\n\n            API.global.lastScanning 'complete'\n          else\n            Ambry.call 'setScanning',\n              active: no\n              progress: 100\n\n            API.global.lastScanning 'complete'\n\n\n      getPhotos()\n\n\n\n  scanPhoto: (image) =>\n    scanned_image = image\n\n    # filetype = scanned_image.filename.split('.')[scanned_image.filename.split('.').length - 1]\n\n    new Promise (resolve) ->\n      resolveResult = (result) =>\n        scanned_image.scan_result = result\n        resolve scanned_image\n\n      try\n        # console.log 'willScanPhoto:'\n        # console.log scanned_image\n        TFLite.runModelOnImage\n          path: image.uri\n          imageMean: 127.0\n          imageStd: 1\n          numResults: 1\n        , (err, res) =>\n          if err\n            # console.log 'TFLite.runModelOnImage (err):'\n            # console.log err\n            resolveResult 0\n          else\n            # console.log 'TFLite.runModelOnImage (res):'\n            # console.log res\n            label = res[0].label\n\n            if label is 'NSFW'\n              confidence_level = res[0].confidence\n            else\n              confidence_level = 1 - res[0].confidence\n\n            resolveResult confidence_level\n      catch\n        resolveResult 0\n"
  ]
}