{
  "version": 3,
  "file": "server.js",
  "sourceRoot": "../../../..",
  "sources": [
    "coffee/imports/genius/api/server.coffee"
  ],
  "names": [],
  "mappings": ";AAAA,IAAA,OAAA,EAAA,WAAA,EAAA;;AAAA,UAAA,GAAa,yBAAb;;;;AAIA,OAAA,GAAU,IAAI,OAAJ,CACR;EAAA,cAAA,EAAgB;AAAhB,CADQ;;AAKV,WAAA,GAAc,CAAC,WAAD,EAAc,IAAd,EAAoB,GAApB,CAAA,GAAA;EACZ,IAAG,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,GAAG,CAAC,YAAY,CAAC,IAA/B,KAAuC,eAAvC,IAA0D,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,GAAG,CAAC,YAAY,CAAC,IAA/B,KAAuC,EAApG;IACE,KAAK,CAAC,IAAN,CAAW,gBAAX,EAA6B;MAAA,OAAA,EAAS,IAAT;MAAc,IAAA,EAAM;IAApB,CAA7B,EADF;;SAEA,KAAA,CAAM,CAAA,CAAA,CAAI,UAAJ,CAAA,CAAA,CAAmB,WAAnB,CAAA,CAAN,EACE;IAAA,MAAA,EAAQ,MAAR;IACA,OAAA,EAAS,OADT;IAEA,IAAA,EAAM,IAAI,CAAC,SAAL,CAAe,IAAf;EAFN,CADF,CAIA,CAAC,IAJD,CAIM,CAAC,GAAD,CAAA,GAAA;WAAS,GAAG,CAAC,IAAJ,CAAA;EAAT,CAJN,CAKA,CAAC,IALD,CAKM,CAAC,GAAD,CAAA,GAAA;IACJ,GAAA,CAAI,GAAJ;IACA,IAAG,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,GAAG,CAAC,YAAY,CAAC,IAA/B,KAAuC,eAAvC,IAA0D,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,GAAG,CAAC,YAAY,CAAC,IAA/B,KAAuC,EAApG;aACE,KAAK,CAAC,IAAN,CAAW,gBAAX,EAA6B;QAAA,OAAA,EAAS,KAAT;QAAa,IAAA,EAAM;MAAnB,CAA7B,EADF;;EAFI,CALN;AAHY;;AAed,OAAA,QAEE;EAAA,UAAA,EAAY,CAAC,IAAD,EAAO,QAAP,CAAA,GAAA;WACV,WAAA,CAAY,cAAZ,EAA4B,IAA5B,EAAkC,CAAC,GAAD,CAAA,GAAA;aAChC,QAAA,CAAS,GAAT;IADgC,CAAlC;EADU,CAAZ;EAMA,SAAA,EAAW,CAAC,KAAD,EAAQ,QAAR,CAAA,GAAA;WACT,WAAA,CAAY,kBAAZ,EACE;MAAA,KAAA,EAAU,KAAH,GAAc,KAAd,GAAyB,EAAhC;MACA,UAAA,EAAY,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,GAAG,CAAC,YAAY,CAAC;IAD3C,CADF,EAGE,CAAC,GAAD,CAAA,GAAA;aACA,QAAA,CAAS,GAAT;IADA,CAHF;EADS,CANX;EAeA,UAAA,EAAY,CAAC,aAAD,EAAgB,QAAhB,CAAA,GAAA;WACV,WAAA,CAAY,mBAAZ,EACE;MAAA,QAAA,EAAU,aAAV;MACA,UAAA,EAAY,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,GAAG,CAAC,YAAY,CAAC;IAD3C,CADF,EAGE,CAAC,GAAD,CAAA,GAAA;aACA,QAAA,CAAS,GAAT;IADA,CAHF;EADU,CAfZ;EAwBA,YAAA,EAAc,CAAC,QAAD,CAAA,GAAA;WACZ,WAAA,CAAY,iCAAZ,EACE;MAAA,KAAA,EAAO,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC,OAA7C;MACA,UAAA,EAAY,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,GAAG,CAAC,YAAY,CAAC;IAD3C,CADF,EAGE,CAAC,GAAD,CAAA,GAAA;MACA,IAAG,QAAH;eAAiB,QAAA,CAAS,GAAT,EAAjB;;IADA,CAHF;EADY,CAxBd;EAiCA,mBAAA,EAAqB,CAAC,KAAD,EAAQ,QAAR,CAAA,GAAA;WACnB,WAAA,CAAY,qBAAZ,EACE;MAAA,KAAA,EAAO,KAAP;MACA,UAAA,EAAY,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,GAAG,CAAC,YAAY,CAAC;IAD3C,CADF,EAGE,CAAC,GAAD,CAAA,GAAA;aACA,QAAA,CAAS,GAAT;IADA,CAHF;EADmB,CAjCrB;EA0CA,UAAA,EAAY,CAAC,QAAD,CAAA,GAAA;WACV,WAAA,CAAY,sBAAZ,EACE;MAAA,UAAA,EAAY,KAAK,CAAC,KAAN,CAAA,CAAa,CAAC,GAAG,CAAC,YAAY,CAAC;IAA3C,CADF,EAEE,CAAC,GAAD,CAAA,GAAA;aACA,QAAA,CAAS,GAAT;IADA,CAFF;EADU;AA1CZ",
  "sourcesContent": [
    "server_url = 'https://thenudeapp.com'\n# server_url = 'http://192.168.1.6:3000'\n# server_url = 'http://192.168.8.164:3000'\n\nheaders = new Headers\n  'content-type': 'application/json'\n\n\n\nmakeRequest = (request_url, data, end) =>\n  if Ambry.state().app.modal_screen.type is 'modal_loading' or Ambry.state().app.modal_screen.type is ''\n    Ambry.call 'setModalScreen', visible: yes, type: 'modal_loading'\n  fetch \"#{ server_url }#{ request_url }\",\n    method: 'POST'\n    headers: headers\n    body: JSON.stringify data\n  .then (res) => res.json()\n  .then (res) =>\n    end res\n    if Ambry.state().app.modal_screen.type is 'modal_loading' or Ambry.state().app.modal_screen.type is ''\n      Ambry.call 'setModalScreen', visible: no, type: ''\n\n\n\nexport default\n\n  createUser: (data, callback) =>\n    makeRequest '/user/create', data, (res) =>\n      callback res\n\n\n\n  checkUser: (email, callback) =>\n    makeRequest '/user/check_user',\n      email: if email then email else ''\n      deviceInfo: Ambry.state().app.initial_data.device_id\n    , (res) =>\n      callback res\n\n\n\n  resetEmail: (email_address, callback) =>\n    makeRequest '/user/reset_email',\n      newEmail: email_address\n      deviceInfo: Ambry.state().app.initial_data.device_id\n    , (res) =>\n      callback res\n\n\n\n  resetPinCode: (callback) =>\n    makeRequest '/user/send_reset_passcode_token',\n      email: Ambry.state().app.user.data.emails[0].address\n      deviceInfo: Ambry.state().app.initial_data.device_id\n    , (res) =>\n      if callback then callback res\n\n\n\n  confirmResetPinCode: (token, callback) =>\n    makeRequest '/user/confirm_token',\n      token: token\n      deviceInfo: Ambry.state().app.initial_data.device_id\n    , (res) =>\n      callback res\n\n\n\n  deleteUser: (callback) =>\n    makeRequest '/user/delete_account',\n      deviceInfo: Ambry.state().app.initial_data.device_id\n    , (res) =>\n      callback res\n"
  ]
}