// Generated by CoffeeScript 2.4.1
export default {
  setInitialData: () => {
    var data;
    data = {
      device_name: Constants.deviceName,
      platform: Constants.platform,
      device_id: Constants.deviceId
    };
    // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
    // console.log '(((setInitialData:'
    // console.log data
    // console.log 'setInitialData)))'
    // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
    LocalAuth.hasHardwareAsync().then((res) => {
      if (res === true) {
        return LocalAuth.supportedAuthenticationTypesAsync().then((res) => {
          data.identity_hardware = LocalAuth.AuthenticationType[res];
          return Ambry.call('setInitialData', data);
        });
      } else {
        data.identity_hardware = false;
        return Ambry.call('setInitialData', data);
      }
    });
    FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'media', {
      intermediates: true
    });
    FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'media/images', {
      intermediates: true
    });
    FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'media/images/original', {
      intermediates: true
    });
    // FileSystem.makeDirectoryAsync FileSystem.documentDirectory + 'media/images/med', { intermediates: yes }
    // FileSystem.makeDirectoryAsync FileSystem.documentDirectory + 'media/images/sm', { intermediates: yes }
    // FileSystem.makeDirectoryAsync FileSystem.documentDirectory + 'media/images/xsm', { intermediates: yes }
    FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'media/videos', {
      intermediates: true
    });
    return FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'breakins', {
      intermediates: true
    });
  },
  checkConnection: (callback) => {
    return NetInfo.fetch().then((state) => {
      return callback(state.isConnected);
    });
  },
  identify: (callback) => {
    return LocalAuth.authenticateAsync().then((res) => {
      if (res.success) {
        return callback(true);
      } else {
        return LocalAuth.authenticateAsync().then((res) => {
          if (res.success) {
            return callback(true);
          } else {
            return LocalAuth.authenticateAsync().then((res) => {
              if (res.success) {
                return callback(true);
              } else {
                return LocalAuth.authenticateAsync().then((res) => {
                  if (res.success) {
                    return callback(true);
                  } else {
                    return LocalAuth.authenticateAsync().then((res) => {
                      if (res.success) {
                        return callback(true);
                      } else {
                        return callback(false);
                      }
                    });
                  }
                });
              }
            });
          }
        });
      }
    });
  },
  storeUser: async() => {
    var local_data, server_data, user_data;
    local_data = {
      account_created_at: new Date(),
      on_trial: false,
      device_id: Ambry.state().app.initial_data.device_id,
      breakins: [],
      allowed_until: new Date(+new Date() + 30 * 86400 * 1000),
      trial_time_left: 30,
      forbidden_entry_until: new Date(),
      settings: {
        touch_id_enabled: false,
        auto_nude_detection: true
      },
      user_first_time: true
    };
    if (Ambry.state().app.restore_user_mode) {
      user_data = {
        ...local_data,
        pin: Ambry.state().app.user.full_pin,
        user_referral_code: '',
        referral_code_used: '',
        emails: [
          {
            address: Ambry.state().app.user.email,
            verified_at: null
          }
        ]
      };
      // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
      // console.log '(((storeUser (Ambry.state().app.restore_user_mode):'
      // console.log user_data
      // console.log 'storeUser)))'
      // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
      await AsyncStorage.setItem('user_data', JSON.stringify(user_data));
      // await AsyncStorage.setItem 'first_launch', JSON.stringify { first_launch: no }
      return Ambry.call('setUserFirstTime', true);
    } else {
      server_data = {
        email: Ambry.state().app.user.email || '',
        referrer: '',
        deviceInfo: Ambry.state().app.initial_data.device_id
      };
      return API.server.createUser(server_data, async(res) => {
        user_data = {
          ...local_data,
          pin: Ambry.state().app.user.full_pin,
          user_referral_code: res.user.referralCode,
          referral_code_used: res.user.referralCode,
          emails: [
            {
              address: Ambry.state().app.user.email,
              verified_at: null
            }
          ]
        };
        // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
        // console.log '(((storeUser (API.server.createUser):'
        // console.log user_data
        // console.log 'storeUser)))'
        // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
        await AsyncStorage.setItem('user_data', JSON.stringify(user_data));
        return Ambry.call('setUserFirstTime', true);
      });
    }
  },
  syncUserLocally: (callback) => {
    return AsyncStorage.getItem('user_data').then((res) => {
      var user;
      // resp = await AsyncStorage.getItem 'first_launch'
      // if resp is null
      //   await AsyncStorage.removeItem 'user_data'
      //   await AsyncStorage.removeItem 'media'
      //   await AsyncStorage.removeItem 'known_media'
      // else
      //   resp = JSON.parse resp
      //   if resp.first_launch
      //     await AsyncStorage.removeItem 'user_data'
      //     await AsyncStorage.removeItem 'media'
      //     await AsyncStorage.removeItem 'known_media'

      // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
      // console.log "(((syncUserLocally (AsyncStorage.getItem('user_data')):"
      // console.log res
      // console.log 'syncUserLocally)))'
      // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
      if (res === null) {
        return user = {
          ...Ambry.state().app.user,
          logged: false,
          data: null,
          full_pin: null,
          email: ''
        };
      } else {
        user = {
          ...Ambry.state().app.user,
          logged: true,
          data: JSON.parse(res)
        };
        // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
        // console.log "(((syncUserLocally (res):"
        // console.log user
        // console.log 'syncUserLocally)))'
        // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
        return API.global.syncUserOnline(user, (res) => {
          if (res === 'OFFLINE') {
            Ambry.call('setUser', user);
            if (typeof callback === 'function') {
              return callback(res === null ? false : true);
            }
          } else {
            Ambry.call('setUser', user);
            if (typeof callback === 'function') {
              return callback(res === null ? false : true);
            }
          }
        });
      }
    });
  },
  syncUserOnline: (local_user, callback) => {
    // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
    // console.log "(((syncUserOnline (local_user):"
    // console.log local_user
    // console.log 'syncUserOnline)))'
    // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
    return API.global.checkConnection((connected) => {
      if (connected) {
        return API.server.checkUser(local_user.data.emails[0].address, (res) => {
          return callback('ONLINE');
        });
      } else {
        return callback('OFFLINE');
      }
    });
  },
  userSawDemo: () => {
    return AsyncStorage.getItem('user_data').then(async(res) => {
      var user, user_data;
      user = {
        ...Ambry.state().app.user,
        data: JSON.parse(res)
      };
      user_data = user.data;
      user_data.user_first_time = false;
      // await AsyncStorage.setItem 'first_launch', JSON.stringify { first_launch: no }
      await AsyncStorage.setItem('user_data', JSON.stringify(user_data));
      return API.global.syncUserLocally();
    });
  },
  startAppLockTimer: () => {
    var locked_at;
    locked_at = new Date();
    return Ambry.call('setAppLockTimer', locked_at);
  },
  clearAppLockTimer: () => {
    return Ambry.call('setAppLockTimer', null);
  },
  setAutoNudeDetection: (value) => {
    return AsyncStorage.getItem('user_data').then(async(res) => {
      var updated_user_data;
      updated_user_data = JSON.parse(res);
      updated_user_data.settings.auto_nude_detection = value;
      await AsyncStorage.setItem('user_data', JSON.stringify(updated_user_data));
      if (value === true) {
        return API.global.syncUserLocally(() => {
          return API.global.startDetection();
        });
      } else {
        return API.global.syncUserLocally();
      }
    });
  },
  setTouchIdEnabled: (value) => {
    return AsyncStorage.getItem('user_data').then(async(res) => {
      var updated_user_data;
      updated_user_data = JSON.parse(res);
      updated_user_data.settings.touch_id_enabled = value;
      await AsyncStorage.setItem('user_data', JSON.stringify(updated_user_data));
      return API.global.syncUserLocally();
    });
  },
  addEmail: (email_address, callback) => {
    return API.server.resetEmail(email_address, (res) => {
      return AsyncStorage.getItem('user_data').then(async(res) => {
        var updated_user_data;
        updated_user_data = JSON.parse(res);
        updated_user_data.emails = [
          {
            address: email_address,
            verified_at: null
          }
        ];
        await AsyncStorage.setItem('user_data', JSON.stringify(updated_user_data));
        return API.global.syncUserLocally(callback);
      });
    });
  },
  changePIN: (full_pin) => {
    return AsyncStorage.getItem('user_data').then(async(res) => {
      var updated_user_data;
      updated_user_data = JSON.parse(res);
      updated_user_data.pin = full_pin;
      await AsyncStorage.setItem('user_data', JSON.stringify(updated_user_data));
      return API.global.syncUserLocally();
    });
  },
  deleteUser: (callback) => {
    Ambry.call('setModalScreen', {
      visible: true,
      type: 'modal_loading'
    });
    return API.global.removeBreakIns(Ambry.state().app.user.data.breakins, () => {
      return API.global.exportMedia(Ambry.state().app.data.media, () => {
        return API.server.deleteUser(async(res) => {
          await AsyncStorage.removeItem('user_data');
          await AsyncStorage.removeItem('media');
          await AsyncStorage.removeItem('known_media');
          await AsyncStorage.removeItem('last_scanning');
          Ambry.call('setUser', {
            logged: false,
            data: null,
            full_pin: null,
            email: ''
          });
          Ambry.call('setModalScreen', {
            visible: false,
            type: ''
          });
          return callback();
        });
      });
    });
  },
  addBreakIn: (object) => {
    var breakin_object, next_path;
    breakin_object = {
      ...object,
      id: random('A0', 16),
      date: new Date()
    };
    next_path = FileSystem.documentDirectory + `breakins/${breakin_object.id}.jpg`;
    FileSystem.moveAsync({
      from: breakin_object.uri,
      to: next_path
    });
    breakin_object.uri = next_path;
    return AsyncStorage.getItem('user_data').then(async(res) => {
      var updated_user_data, user_data;
      user_data = JSON.parse(res);
      updated_user_data = user_data;
      updated_user_data.breakins.push(breakin_object);
      await AsyncStorage.setItem('user_data', JSON.stringify(updated_user_data));
      return API.global.syncUserLocally();
    });
  },
  removeBreakIns: (objects, callback) => {
    return AsyncStorage.getItem('user_data').then(async(res) => {
      var updated_breakins, user_data;
      user_data = JSON.parse(res);
      updated_breakins = user_data.breakins;
      objects.map((object, num) => {
        var object_to_remove;
        object_to_remove = _.findWhere(updated_breakins, {
          id: object.id
        });
        updated_breakins = _.without(updated_breakins, object_to_remove);
        return FileSystem.deleteAsync(object.uri, {
          idempotent: true
        });
      });
      user_data.breakins = updated_breakins;
      await AsyncStorage.setItem('user_data', JSON.stringify(user_data));
      if (callback) {
        return API.global.syncUserLocally(callback);
      } else {
        return API.global.syncUserLocally();
      }
    });
  },
  syncMediaLocally: () => {
    return AsyncStorage.getItem('media').then((res) => {
      var media;
      if (res === null) {
        media = [];
      } else {
        media = JSON.parse(res);
      }
      // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
      // console.log "(((syncMediaLocally:"
      // console.log res
      // console.log 'syncMediaLocally)))'
      // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
      return Ambry.call('setMediaData', media);
    });
  },
  addMedia: async(options, objects, callback) => {
    var new_media_objects;
    new_media_objects = [];
    await Promise.all(objects.map((await async(object, num) => {
      var FS_permission_status, full_media_object, next_path, next_paths, specific_media_object, static_media_object;
      if (object.type === 'image' || object.type === 'video') {
        static_media_object = {
          id: random('A0', 16),
          date: new Date(),
          type: object.type,
          path: object.uri,
          width: object.width,
          height: object.height,
          filetype: object.filename ? object.filename.split('.')[object.filename.split('.').length - 1] : 'jpg'
        };
        // console.log 'addMedia:'
        // console.log static_media_object
        if (object.type === 'image') {
          next_paths = {
            original: FileSystem.documentDirectory + `media/images/original/${static_media_object.id}.jpg`
          };
          // original: FileSystem.documentDirectory + "media/images/original/#{ static_media_object.id }.#{ static_media_object.filetype }"
          // med: FileSystem.documentDirectory + "media/images/med/#{ static_media_object.id }.jpg"
          // sm: FileSystem.documentDirectory + "media/images/sm/#{ static_media_object.id }.jpg"
          // xsm: FileSystem.documentDirectory + "media/images/xsm/#{ static_media_object.id }.jpg"
          specific_media_object = {};
        } else if (object.type === 'video') {
          next_path = FileSystem.documentDirectory + `media/videos/${static_media_object.id}.${static_media_object.filetype}`;
          specific_media_object = {
            duration: object.duration
          };
        }
        if (object.type === 'image') {
          ({
            status: FS_permission_status
          } = (await Permissions.askAsync(Permissions.CAMERA_ROLL)));
          // { uri: path_med } = await ImageManipulator.manipulateAsync static_media_object.path, [{ resize: { width: 300 } }]
          // { uri: path_sm } = await ImageManipulator.manipulateAsync static_media_object.path, [{ resize: { width: 150 } }]
          // { uri: path_xsm } = await ImageManipulator.manipulateAsync static_media_object.path, [{ resize: { width: 50 } }]
          if (options.import) {
            FileSystem.copyAsync({
              from: static_media_object.path,
              to: next_paths.original
            });
          } else {
            FileSystem.moveAsync({
              from: static_media_object.path,
              to: next_paths.original
            });
          }
          // FileSystem.moveAsync { from: path_med, to: next_paths.med }
          // FileSystem.moveAsync { from: path_sm, to: next_paths.sm }
          // FileSystem.moveAsync { from: path_xsm, to: next_paths.xsm }
          if (options.import) {
            specific_media_object.library_id = object.id;
          }
          specific_media_object.path = next_paths.original;
        // specific_media_object.path_med = next_paths.med
        // specific_media_object.path_sm = next_paths.sm
        // specific_media_object.path_xsm = next_paths.xsm
        } else if (object.type === 'video') {
          FileSystem.copyAsync({
            from: static_media_object.path,
            to: next_path
          });
          if (options.import) {
            specific_media_object.library_id = object.id;
          }
          specific_media_object.path = next_path;
        }
        full_media_object = {...static_media_object, ...specific_media_object};
        return new_media_objects.push(full_media_object);
      }
    })));
    if (new_media_objects.length > 0) {
      return AsyncStorage.getItem('media').then(async(res) => {
        var media;
        if (res === null) {
          media = [...new_media_objects];
        } else {
          media = [...JSON.parse(res), ...new_media_objects];
        }
        await AsyncStorage.setItem('media', JSON.stringify(media));
        API.global.syncMediaLocally();
        if (options.import === true) {
          Ambry.call('setImportNotification', {
            visible: true,
            objects: new_media_objects
          });
        }
        if (callback) {
          return callback();
        }
      });
    }
  },
  removeMedia: (objects, callback) => {
    return AsyncStorage.getItem('media').then(async(res) => {
      var local_objects, updated_objects;
      local_objects = JSON.parse(res);
      updated_objects = local_objects;
      objects.map((object, num) => {
        var object_to_remove;
        object_to_remove = _.findWhere(local_objects, {
          id: object.id
        });
        updated_objects = _.without(updated_objects, object_to_remove);
        return FileSystem.deleteAsync(object.path, {
          idempotent: true
        });
      });
      // if object.type is 'image'
      //   FileSystem.deleteAsync object.path_med, { idempotent: yes }
      //   FileSystem.deleteAsync object.path_sm, { idempotent: yes }
      //   FileSystem.deleteAsync object.path_xsm, { idempotent: yes }
      await AsyncStorage.setItem('media', JSON.stringify(updated_objects));
      API.global.syncMediaLocally();
      if (callback) {
        return callback();
      }
    });
  },
  removeMediaFromLibrary: (objects, callback) => {
    // { status: FS_permission_status } = await Permissions.askAsync Permissions.CAMERA_ROLL
    // if FS_permission_status is 'granted'
    objects.map((object) => {
      // console.log 'removeMediaFromLibrary:'
      // console.log object
      return MediaLibrary.deleteAssetsAsync(object.library_id);
    });
    if (callback) {
      return callback();
    }
  },
  // else
  //   if callback then callback()
  exportMedia: async(objects, callback) => {
    var FS_permission_status, i, j, known_media, known_media_res, media_content_path, media_id, object, ref, unknown_media_ids;
    ({
      status: FS_permission_status
    } = (await Permissions.askAsync(Permissions.CAMERA_ROLL)));
    if (FS_permission_status === 'granted') {
      unknown_media_ids = [];
      for (i = j = 0, ref = objects.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        object = objects[i];
        media_content_path = (await CameraRoll.saveToCameraRoll(object.path));
        media_id = media_content_path.split('/')[media_content_path.split('/').length - 1];
        unknown_media_ids.push(media_id);
      }
      known_media_res = (await AsyncStorage.getItem('known_media'));
      known_media = known_media_res === null ? [] : JSON.parse(known_media_res);
      await AsyncStorage.setItem('known_media', JSON.stringify([...known_media, ...unknown_media_ids]));
      // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
      // console.log "(((exportMedia(unknown_media_ids):"
      // console.log unknown_media_ids
      // console.log 'exportMedia)))'
      // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
      return API.global.removeMedia(objects, callback);
    }
  },
  lastScanning: async(operation, options) => {
    var known_media, known_media_res, last_scanning, last_scanning_res, unknown_media_ids;
    last_scanning_res = (await AsyncStorage.getItem('last_scanning'));
    last_scanning = last_scanning_res === null ? null : JSON.parse(last_scanning_res);
    switch (operation) {
      case 'create':
        return AsyncStorage.setItem('last_scanning', JSON.stringify({
          unknown_media: options.unknown_media,
          last_scanned: -1,
          nude_photos_detected: []
        }));
      case 'get':
        return last_scanning;
      case 'update':
        return AsyncStorage.setItem('last_scanning', JSON.stringify({
          ...last_scanning,
          last_scanned: options.last_scanned,
          nude_photos_detected: options.nude_photo_detected ? [...last_scanning.nude_photos_detected, options.nude_photo_detected] : [...last_scanning.nude_photos_detected]
        }));
      case 'complete':
        if (last_scanning) {
          known_media_res = (await AsyncStorage.getItem('known_media'));
          known_media = known_media_res === null ? [] : JSON.parse(known_media_res);
          unknown_media_ids = last_scanning.unknown_media.map((item) => {
            return item.id;
          });
          AsyncStorage.setItem('known_media', JSON.stringify([...known_media, ...unknown_media_ids]));
          if (last_scanning.nude_photos_detected.length > 0) {
            return API.global.addMedia({
              import: true
            }, last_scanning.nude_photos_detected.map((item) => {
              item.type = 'image';
              return item;
            }));
          }
        } else {
          return AsyncStorage.removeItem('last_scanning');
        }
        break;
      case 'finish':
        return AsyncStorage.removeItem('last_scanning');
    }
  },
  startDetection: () => {
    var confidence_level, nude_photos, objects_per_page, start_index;
    objects_per_page = 30;
    confidence_level = .0939;
    start_index = 0;
    nude_photos = [];
    Ambry.call('setScanning', {
      active: true,
      progress: 0
    });
    return AsyncStorage.getItem('known_media').then((res) => {
      var after, current_number, getPhotos, has_next_page, iteration, known_media, processPhotos, progress, steps_on_percent, unknown_media;
      known_media = res === null ? [] : [...JSON.parse(res)];
      unknown_media = [];
      iteration = 0;
      steps_on_percent = 0;
      after = '0';
      has_next_page = true;
      current_number = 0;
      progress = 0;
      getPhotos = () => {
        return MediaLibrary.getAssetsAsync({
          after: after,
          first: objects_per_page,
          mediaType: ['photo'],
          sortBy: ['creationTime']
        }).then((res) => {
          iteration++;
          after = res.endCursor;
          return processPhotos(res);
        });
      };
      processPhotos = async(data) => {
        var i, j, last_scanning, ref, ref1, scanned_image;
        data.assets.map((asset, num) => {
          var asset_exists;
          asset_exists = known_media.indexOf(asset.id) !== -1;
          if (!asset_exists) {
            return unknown_media.push(asset);
          }
        });
        if (data.hasNextPage) {
          return getPhotos();
        } else {
          API.global.userSawDemo();
          last_scanning = (await API.global.lastScanning('get'));
          if (last_scanning) {
            nude_photos = [...last_scanning.nude_photos_detected];
            start_index = last_scanning.last_scanned + 1;
          } else {
            API.global.lastScanning('create', {
              unknown_media: unknown_media
            });
          }
          // console.log '(unknown_media.length): ' + unknown_media.length
          if (unknown_media.length > 0) {
            progress = 1;
            steps_on_percent = (100 - progress) / unknown_media.length;
            if (last_scanning) {
              progress = progress + (steps_on_percent * start_index);
            }
            Ambry.call('setScanning', {
              active: true,
              progress: progress
            });
// console.log 'for i in ->:'
// console.log [start_index...unknown_media.length]
            for (i = j = ref = start_index, ref1 = unknown_media.length; (ref <= ref1 ? j < ref1 : j > ref1); i = ref <= ref1 ? ++j : --j) {
              scanned_image = (await API.global.scanPhoto(unknown_media[i]));
              // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
              // console.log "(((processPhotos (scanned_image):"
              // console.log scanned_image
              // console.log 'processPhotos)))'
              // console.log '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
              progress = progress + steps_on_percent;
              Ambry.call('setScanning', {
                active: progress.toFixed(0) === 100 || progress > 100 ? false : true,
                progress: progress
              });
              if (scanned_image.scan_result > confidence_level) {
                nude_photos.push(scanned_image);
                await API.global.lastScanning('update', {
                  last_scanned: i,
                  nude_photo_detected: scanned_image
                });
              } else {
                await API.global.lastScanning('update', {
                  last_scanned: i
                });
              }
            }
            Ambry.call('setScanning', {
              active: false,
              progress: 100
            });
            return API.global.lastScanning('complete');
          } else {
            Ambry.call('setScanning', {
              active: false,
              progress: 100
            });
            return API.global.lastScanning('complete');
          }
        }
      };
      return getPhotos();
    });
  },
  scanPhoto: (image) => {
    var scanned_image;
    scanned_image = image;
    // filetype = scanned_image.filename.split('.')[scanned_image.filename.split('.').length - 1]
    return new Promise(function(resolve) {
      var resolveResult;
      resolveResult = (result) => {
        scanned_image.scan_result = result;
        return resolve(scanned_image);
      };
      try {
        // console.log 'willScanPhoto:'
        // console.log scanned_image
        return TFLite.runModelOnImage({
          path: image.uri,
          imageMean: 127.0,
          imageStd: 1,
          numResults: 1
        }, (err, res) => {
          var confidence_level, label;
          if (err) {
            // console.log 'TFLite.runModelOnImage (err):'
            // console.log err
            return resolveResult(0);
          } else {
            // console.log 'TFLite.runModelOnImage (res):'
            // console.log res
            label = res[0].label;
            if (label === 'NSFW') {
              confidence_level = res[0].confidence;
            } else {
              confidence_level = 1 - res[0].confidence;
            }
            return resolveResult(confidence_level);
          }
        });
      } catch (error) {
        return resolveResult(0);
      }
    });
  }
};

//# sourceMappingURL=global.js.map
