// Generated by CoffeeScript 2.4.1
var Shape, Welcome, _class,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import NudeLogo from './sub/nude_logo';

Welcome = _class = class extends Component {
  constructor(props) {
    super(props);
    this.componentDidMount = this.componentDidMount.bind(this);
    this.shouldComponentUpdate = this.shouldComponentUpdate.bind(this);
    this.componentDidUpdate = this.componentDidUpdate.bind(this);
    // @props.navigation.navigate 'Home'
    this.startRegistration = this.startRegistration.bind(this);
    this.enter = this.enter.bind(this);
    this.restore = this.restore.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      loaded: false,
      logo_bottom: new Animated.Value(-25),
      welcome_box_opacity: new Animated.Value(0),
      welcome_box_scale: new Animated.Value(.7)
    };
  }

  componentDidMount() {
    boundMethodCheck(this, _class);
    if (this.props.screenProps.loaded) {
      return this.startRegistration();
    }
  }

  shouldComponentUpdate(nextProps, nextState) {
    boundMethodCheck(this, _class);
    if (this.props.screenProps.loaded !== nextProps.screenProps.loaded || this.state.loaded !== nextState.loaded || this.props.app.user.logged !== nextProps.app.user.logged) {
      return true;
    } else {
      return false;
    }
  }

  componentDidUpdate(prevProps) {
    boundMethodCheck(this, _class);
    if (!this.props.app.user.logged) {
      return this.startRegistration();
    } else {
      return this.props.navigation.navigate('PinCodeVerification');
    }
  }

  startRegistration() {
    boundMethodCheck(this, _class);
    console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>');
    console.log("(((startRegistration)))");
    console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>');
    return this.setState({
      loaded: true
    }, () => {
      Animated.spring(this.state.logo_bottom, {
        toValue: -140,
        speed: 5,
        useNativeDriver: true
      }).start();
      Animated.spring(this.state.welcome_box_opacity, {
        toValue: 1,
        speed: 5,
        useNativeDriver: true
      }).start();
      return Animated.spring(this.state.welcome_box_scale, {
        toValue: 1,
        speed: 5,
        useNativeDriver: true
      }).start();
    });
  }

  enter() {
    boundMethodCheck(this, _class);
    return this.props.navigation.navigate('Cards');
  }

  restore() {
    boundMethodCheck(this, _class);
    return API.global.checkConnection((connected) => {
      if (connected) {
        return API.server.checkUser(null, (res) => {
          if (res.device_id_found) {
            return this.props.navigation.navigate({
              routeName: 'PinCodeCreate',
              params: {
                restore_user: true
              }
            });
          } else {
            return Alert.alert('Error', 'Sorry, but this device hasn\'t been registered before');
          }
        });
      } else {
        return Alert.alert('Connection Error', 'Please check your internet connection');
      }
    });
  }

  render() {
    boundMethodCheck(this, _class);
    return <ImageBackground source={Assets.img.pictures.nude_bg_leafs} style={Shape.BGImage}>
      <View style={Shape.Box}>
        <Animated.View style={{
        ...Shape.LogoBox,
        transform: [
          {
            translateY: this.state.logo_bottom
          }
        ]
      }}>
          <NudeLogo />
        </Animated.View>
        {(this.state.loaded ? <Animated.View style={{
        ...Shape.WelcomeBox,
        position: 'absolute',
        width: '90%',
        top: '40%',
        justifyContent: 'center',
        alignItems: 'center',
        opacity: this.state.welcome_box_opacity,
        transform: [
          {
            scaleX: this.state.welcome_box_scale
          },
          {
            scaleY: this.state.welcome_box_scale
          }
        ]
      }}>
              <View style={Shape.WelcomeBoxContent}>
                <Text style={[Typography.Bold, Typography.Big, Shape.WelcomeBoxTopText]}>Welcome to the nude app</Text>
                <Text style={[Typography.Medium, Typography.Regular, Shape.WelcomeBoxText]}>The safest & easiest way to store all your naughty photos and videos</Text>
              </View>
              <View style={Shape.WelcomeBoxEnter}>
                <StatusBar barStyle='light-content' />
                <Theme.CircleButton text='ENTER' onPress={this.enter} />
              </View>
            </Animated.View> : void 0)}
        {(this.state.loaded ? <Text style={[Typography.Medium, Typography.Small, Shape.WelcomeRestore]} onPress={this.restore}>Previously Registered? Restore <Text style={{
        textDecorationLine: 'underline'
      }}>here</Text>.</Text> : void 0)}
      </View>
    </ImageBackground>;
  }

};

Shape = StyleSheet.create({
  BGImage: {
    flex: 1,
    width: '100%',
    resizeMode: 'contain'
  },
  Box: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center'
  },
  LogoBox: {
    width: 200,
    height: 220,
    alignItems: 'center'
  },
  WelcomeBox: {
    justifyContent: 'center',
    alignItems: 'center',
    paddingBottom: 43
  },
  WelcomeBoxContent: {
    width: '100%',
    height: '100%',
    borderWidth: 1,
    borderColor: 'white',
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 20,
    paddingHorizontal: 10
  },
  WelcomeBoxTopText: {
    marginVertical: 10,
    textAlign: 'center'
  },
  WelcomeBoxText: {
    marginVertical: 10,
    marginBottom: 50,
    textAlign: 'center'
  },
  WelcomeBoxEnter: {
    position: 'absolute',
    bottom: 0
  },
  WelcomeRestore: {
    position: 'absolute',
    padding: 20,
    bottom: 20,
    opacity: .8
  }
});

export default Hybrid(Welcome);

//# sourceMappingURL=welcome.js.map
