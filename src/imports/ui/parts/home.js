// Generated by CoffeeScript 2.4.1
var Home, Shape, _class,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import GridView from './grid_view';

import ListView from './list_view';

import GalleryView from './gallery_view';

import VideoView from './video_view';

import HomePlus from './sub/home_plus';

import ImportNotification from './sub/import_notification';

Home = _class = class extends PureComponent {
  constructor(props) {
    super(props);
    this.componentDidMount = this.componentDidMount.bind(this);
    // API.global.clearAppLockTimer()
    this.componentDidUpdate = this.componentDidUpdate.bind(this);
    this.componentWillUnmount = this.componentWillUnmount.bind(this);
    this.checkAppState = this.checkAppState.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      objects: this.props.app.data.media,
      notification_position: new Animated.Value(-64)
    };
  }

  componentDidMount() {
    boundMethodCheck(this, _class);
    // console.log 'Home mount'
    if (this.props.app.user.data.user_first_time) {
      Ambry.call('setModalScreen', {
        visible: true,
        type: 'modal_scanning'
      });
    }
    return AppState.addEventListener('change', this.checkAppState);
  }

  componentDidUpdate(prevProps) {
    boundMethodCheck(this, _class);
    if (!_.isEqual(this.props.app.data.media, prevProps.app.data.media)) {
      return this.setState({
        objects: this.props.app.data.media
      });
    }
  }

  componentWillUnmount() {
    boundMethodCheck(this, _class);
    return AppState.removeEventListener('change', this.checkAppState);
  }

  checkAppState(nextAppState) {
    boundMethodCheck(this, _class);
    if (this.props.isFocused) {
      if (Platform.OS === 'ios') {
        if (nextAppState !== 'active') {
          return this.props.navigation.navigate('LockedScreen');
        }
      } else {
        // if nextAppState isnt 'active'
        //   API.global.startAppLockTimer()
        // else
        // time_left = moment.duration(moment(moment new Date()).diff(@props.app.locked_at)).asMilliseconds()
        if (nextAppState === 'active') {
          if (!this.props.app.scanning.active && !this.props.app.user.data.user_first_time && !this.props.app.lock_lock) {
            return this.props.navigation.navigate('PinCodeVerification');
          }
        }
      }
    }
  }

  render() {
    boundMethodCheck(this, _class);
    if (this.props.isFocused) {
      if (this.props.app.import_notification.visible === true) {
        Animated.spring(this.state.notification_position, {
          toValue: 0,
          speed: 30,
          useNativeDriver: true
        }).start();
      } else {
        Animated.spring(this.state.notification_position, {
          toValue: -64,
          speed: 40,
          useNativeDriver: true
        }).start();
      }
      return <View style={Shape.Box}>
        <View style={Shape.View}>
          <StatusBar barStyle='light-content' />
          <Animated.View style={{
          ...Shape.Notification,
          transform: [
            {
              translateY: this.state.notification_position
            }
          ]
        }}>
            <ImportNotification />
          </Animated.View>
          {(this.props.view === 'grid' ? <GridView objects={this.state.objects} /> : this.props.view === 'list' ? <ListView objects={this.state.objects} /> : this.props.view === 'gallery' ? <GalleryView objects={this.state.objects} /> : this.props.view === 'video' ? <VideoView objects={this.state.objects} /> : void 0)}
        </View>
        <View style={{
          ...Shape.HomePlus,
          height: Platform.OS === 'ios' ? 80 : 144
        }} pointerEvents='box-none'>
          <HomePlus />
        </View>
      </View>;
    } else {
      return null;
    }
  }

};

Shape = StyleSheet.create({
  Box: {
    flex: 1,
    width: '100%'
  },
  Notification: {
    position: 'absolute',
    zIndex: 2,
    height: 64,
    top: 0,
    left: 0,
    right: 0
  },
  View: {
    zIndex: 1,
    flex: 1,
    width: '100%',
    backgroundColor: '#F5F6F9'
  },
  HomePlus: {
    position: 'absolute',
    zIndex: 2,
    bottom: 0,
    width: '100%'
  }
});

export default Hybrid(withNavigationFocus(withNavigation(Home)));

//# sourceMappingURL=home.js.map
