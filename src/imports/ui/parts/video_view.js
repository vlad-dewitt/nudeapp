// Generated by CoffeeScript 2.4.1
var Shape, VideoView, _class,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

VideoView = _class = class extends PureComponent {
  constructor(props) {
    super(props);
    this.componentDidMount = this.componentDidMount.bind(this);
    this.componentDidUpdate = this.componentDidUpdate.bind(this);
    this.init = this.init.bind(this);
    this.openMedia = this.openMedia.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      objects: []
    };
  }

  componentDidMount() {
    boundMethodCheck(this, _class);
    return this.init();
  }

  componentDidUpdate(prevProps, prevState) {
    boundMethodCheck(this, _class);
    if (!_.isEqual(this.props.objects, prevProps.objects)) {
      return this.init();
    } else if (!_.isEqual(this.state.objects, prevState.objects)) {
      return this.init();
    }
  }

  init() {
    var objects;
    boundMethodCheck(this, _class);
    objects = this.props.objects;
    objects = _.where(objects, {
      type: 'video'
    });
    return this.setState({
      objects: objects
    });
  }

  openMedia(number) {
    boundMethodCheck(this, _class);
    Ambry.call('fillMediaViewer', {
      objects: this.state.objects,
      first: number
    });
    return this.props.navigation.navigate('MediaViewer');
  }

  render() {
    boundMethodCheck(this, _class);
    return <View style={Shape.Box}>
      <ScrollView style={Shape.ScrollBox}>
        {(this.state.objects.length === 0 ? <View style={Shape.Empty}>
              <Image source={Assets.img.icons.video} style={{
        width: 96,
        height: 96,
        resizeMode: 'contain',
        marginLeft: 5
      }} />
              <Text style={[Typography.Medium, Typography.Big, Typography.Grey, Shape.EmptyText]}>{"No Videos Yet"}</Text>
            </View> : <View style={Shape.List}>
              {this.state.objects.map((object, num) => {
      return <TouchableOpacity key={num} style={Shape.ListItem} activeOpacity={.7} onPress={this.openMedia.bind(this, num)}>
                    <Video source={{
          uri: object.path
        }} rate={1.0} volume={1.0} isMuted={false} resizeMode='cover' shouldPlay={false} isLooping={false} style={{
          width: '100%',
          height: '100%'
        }} />
                    <View style={Shape.ListItemInfo}>
                      <View style={{
          position: 'absolute',
          top: 0,
          left: 0,
          bottom: 0,
          right: 0
        }} pointerEvents='box-none'>
                        <Image source={Assets.img.pictures.dark_bottom_gradient} style={{
          width: '100%',
          height: '100%',
          resizeMode: 'stretch'
        }} />
                      </View>
                      <Image source={Assets.img.icons.video_linear_icon} style={{
          width: 16,
          height: 16,
          resizeMode: 'contain'
        }} />
                      <Text style={[Typography.Medium, Typography.Small]}>{(object.duration > 3599999 ? moment(moment.duration(object.duration * 1000)._data).format('h:mm:ss') : moment(moment.duration(object.duration * 1000)._data).format('m:ss'))}</Text>
                    </View>
                  </TouchableOpacity>;
    })}
            </View>)}
      </ScrollView>
    </View>;
  }

};

Shape = StyleSheet.create({
  Box: {
    flex: 1,
    width: '100%'
  },
  ScrollBox: {
    flex: 1,
    width: '100%'
  },
  Empty: {
    flex: 1,
    marginTop: Window.height / 4,
    alignItems: 'center',
    justifyContent: 'center'
  },
  EmptyText: {
    marginTop: 15,
    textAlign: 'center'
  },
  List: {
    width: '100%',
    flexDirection: 'row',
    flexWrap: 'wrap',
    alignItems: 'center',
    marginBottom: 125,
    paddingHorizontal: 2,
    paddingTop: 2
  },
  ListItem: {
    width: (Window.width - 4) / 2,
    height: (Window.width - 4) / 2,
    borderWidth: 2,
    borderColor: '#F5F6F9',
    borderRadius: 4,
    overflow: 'hidden'
  },
  ListItemInfo: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    zIndex: 3,
    width: '100%',
    height: 32,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 10
  }
});

export default Hybrid(withNavigation(VideoView));

//# sourceMappingURL=video_view.js.map
