// Generated by CoffeeScript 2.4.1
var PinCodeReset, Shape, _class,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import BGGradient from './sub/bg_gradient';

PinCodeReset = _class = class extends PureComponent {
  constructor(props) {
    super(props);
    this.componentDidMount = this.componentDidMount.bind(this);
    this.cancel = this.cancel.bind(this);
    this.focusInputBox = this.focusInputBox.bind(this);
    this.typeCode = this.typeCode.bind(this);
    this.submit = this.submit.bind(this);
    this.sendCode = this.sendCode.bind(this);
    this.resendCode = this.resendCode.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      code: '',
      symbols: ['', '', '', '', '', '']
    };
  }

  componentDidMount() {
    boundMethodCheck(this, _class);
    this.props.navigation.closeDrawer();
    return this.sendCode();
  }

  cancel() {
    boundMethodCheck(this, _class);
    return this.props.navigation.navigate('PinCodeVerification');
  }

  focusInputBox() {
    boundMethodCheck(this, _class);
    if (this.InputBox) {
      return this.InputBox.focus();
    }
  }

  typeCode(value) {
    boundMethodCheck(this, _class);
    return this.setState({
      code: value
    }, () => {
      var input_symbols, updated_symbols;
      updated_symbols = ['', '', '', '', '', ''];
      input_symbols = this.state.code.split('');
      input_symbols.map((symbol, num) => {
        return updated_symbols[num] = symbol;
      });
      return this.setState({
        symbols: updated_symbols
      });
    });
  }

  submit() {
    var full_code;
    boundMethodCheck(this, _class);
    full_code = this.state.symbols.join('');
    return API.server.confirmResetPinCode(full_code, (res) => {
      if (res) {
        if (res.confirmed) {
          return this.props.navigation.navigate('ChangePIN');
        } else {
          return Alert.alert('Error', 'You entered the wrong code', {
            text: 'OK'
          });
        }
      } else {
        return Alert.alert('Error', 'Internal Server Error', {
          text: 'OK'
        });
      }
    });
  }

  sendCode() {
    boundMethodCheck(this, _class);
    return API.global.checkConnection((connected) => {
      if (connected) {
        return API.server.resetPinCode();
      } else {
        return Alert.alert('Connection Error', 'Please check your internet connection', [
          {
            text: 'Go back',
            onPress: () => {
              return this.cancel();
            }
          }
        ]);
      }
    });
  }

  resendCode() {
    boundMethodCheck(this, _class);
    return this.sendCode();
  }

  render() {
    boundMethodCheck(this, _class);
    return <BGGradient colors={['#EDA9A9', '#FFD8C0']}>
      <StatusBar barStyle='light-content' />
      <View style={Shape.Header}>
        <TouchableOpacity style={Shape.HeaderLeft} onPress={this.cancel}>
          <Image source={Assets.img.icons.back_arrow} style={{
        width: 18,
        height: 18,
        resizeMode: 'contain'
      }} />
        </TouchableOpacity>
        <View style={Shape.HeaderRight}></View>
      </View>
      <View style={Shape.Box}>
        <Text style={[Typography.SemiBold, Typography.Bigger, Shape.Text]}>{"Confirm your identity to reset\nyour PIN number"}</Text>
        <Text style={[Typography.Medium, Typography.Regular, Shape.Text]}>{"We just sent an access code to your\nemail account. Please enter below."}</Text>
        <TouchableOpacity style={Shape.InputBox} activeOpacity={1} onPress={this.focusInputBox}>
          <TextInput ref={(input) => {
        return this.InputBox = input;
      }} style={[Typography.Medium, Typography.Regular, Shape.ShadowInput]} onChangeText={this.typeCode} value={this.state.code} placeholder='' maxLength={6} contextMenuHidden={true} autoCompleteType='off' keyboardType='number-pad' underlineColorAndroid='transparent' autoCapitalize='none' blurOnSubmit={true} returnKeyType='done' onSubmitEditing={this.submit} />
          {this.state.symbols.map((symbol, num) => {
      if (symbol.length === 0) {
        return <View key={num} style={Shape.InputBoxItemHidden} />;
      } else {
        return <Text key={num} style={[Typography.SemiBold, Shape.InputBoxItem]}>{symbol}</Text>;
      }
    })}
        </TouchableOpacity>
        <View style={Shape.ButtonsContainer}>
          <Theme.ButtonWhite style={{
        width: Window.width - 80
      }} text='CONFIRM' color='#F6C3B6' onPress={this.submit} />
          <Text style={[Typography.Small, Typography.White, Shape.Resend]} onPress={this.resendCode}>Resend Code</Text>
        </View>
      </View>
    </BGGradient>;
  }

};

Shape = StyleSheet.create({
  Header: {
    position: 'absolute',
    width: '100%',
    height: 68,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingTop: 32
  },
  HeaderLeft: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  HeaderRight: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  Box: {
    flex: 1,
    marginTop: 100
  },
  Text: {
    textAlign: 'center',
    marginBottom: 15
  },
  InputBox: {
    flexDirection: 'row',
    zIndex: 2,
    left: 45,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(255,255,255,.23)',
    borderWidth: 1,
    borderColor: 'white',
    width: Window.width - 90,
    height: 90,
    marginVertical: 40,
    borderRadius: 12
  },
  ShadowInput: {
    width: 0,
    height: 0,
    overflow: 'hidden'
  },
  InputBoxItem: {
    textAlign: 'center',
    width: 36,
    marginTop: 6,
    color: 'rgb(128, 128, 128)',
    fontSize: 32,
    lineHeight: 32
  },
  InputBoxItemHidden: {
    height: 16,
    width: 16,
    marginHorizontal: 10,
    borderRadius: 8,
    backgroundColor: 'rgba(255, 255, 255, .4)'
  },
  ButtonsContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 15
  },
  Resend: {
    marginTop: 20
  }
});

export default Hybrid(PinCodeReset);

//# sourceMappingURL=pin_code_reset.js.map
