// Generated by CoffeeScript 2.4.1
var ModalScreen, Shape, _class,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import * as Progress from 'react-native-progress';

import BGGradient from './sub/bg_gradient';

ModalScreen = _class = class extends Component {
  constructor(props) {
    super(props);
    this.shouldComponentUpdate = this.shouldComponentUpdate.bind(this);
    this.componentDidUpdate = this.componentDidUpdate.bind(this);
    this.closeModalScreen = this.closeModalScreen.bind(this);
    this.showModalPlus = this.showModalPlus.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      config: this.props.app.modal_screen,
      loading: new Animated.Value(0)
    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    boundMethodCheck(this, _class);
    if (this.props.app.modal_screen !== nextProps.app.modal_screen) {
      return true;
    } else if (this.props.app.scanning !== nextProps.app.scanning) {
      return true;
    } else if (this.props.app.user.data !== nextProps.app.user.data) {
      return true;
    } else if (this.state.config !== nextState.config) {
      return true;
    } else {
      return false;
    }
  }

  componentDidUpdate() {
    boundMethodCheck(this, _class);
    return this.setState({
      config: this.props.app.modal_screen
    });
  }

  closeModalScreen() {
    boundMethodCheck(this, _class);
    if (this.state.config.type === 'modal_plus') {
      return Ambry.call('setModalScreen', {
        visible: true,
        type: 'modal_scanning_process'
      });
    } else {
      return Ambry.call('setModalScreen', {
        visible: false,
        type: ''
      });
    }
  }

  showModalPlus() {
    boundMethodCheck(this, _class);
    return Ambry.call('setModalScreen', {
      visible: true,
      type: 'modal_plus'
    });
  }

  render() {
    boundMethodCheck(this, _class);
    return <View style={Shape.Box}>
      {(this.state.config.type === 'modal_scanning' ? <TouchableOpacity style={Shape.ModalLayout} activeOpacity={1} onPress={this.showModalPlus}>
            <View style={Shape.ModalScanning}>
              <Image source={Assets.img.pictures.modal_scanning} style={{
        width: '100%',
        height: '100%',
        resizeMode: 'contain'
      }} />
            </View>
          </TouchableOpacity> : this.state.config.type === 'modal_loading' ? <View style={Shape.ModalLoading}>
            <Progress.Circle size={64} indeterminate={true} color='#F98187' borderColor='#F98187' borderWidth={3} />
          </View> : this.state.config.type === 'modal_plus' ? <TouchableOpacity style={Shape.ModalLayout} activeOpacity={1} onPress={this.closeModalScreen}>
            <View style={Shape.ModalPlus}>
              <Image source={Platform.OS === 'ios' ? Assets.img.pictures.modal_plus : Assets.img.pictures.modal_plus_android} style={{
        width: '100%',
        height: '100%',
        resizeMode: 'contain'
      }} />
            </View>
          </TouchableOpacity> : this.state.config.type === 'modal_scanning_process' ? <View style={Shape.ModalScanningProcess}>
            <BGGradient colors={['#CED5DF', '#A9B0C2']} from={[0, 0]} to={[0, 1]} style={{
        width: '100%',
        height: '100%',
        padding: 20
      }}>
              {(this.props.app.user.data.user_first_time && this.props.app.scanning.active ? null : <TouchableOpacity style={Shape.ModalScanningProcessClose} activeOpacity={.7} onPress={this.closeModalScreen}>
                    <Image source={Assets.img.icons.thin_cross} style={{
        width: '100%',
        height: '100%'
      }} />
                  </TouchableOpacity>)}
              <View style={Shape.ModalScanningProcessLoading}>
                <ImageBackground source={Assets.img.pictures.progress_circle_bg} style={{
        width: '100%',
        height: '100%',
        resizeMode: 'contain'
      }}>
                  <View style={Shape.ModalScanningProcessLoadingCircle}>
                    <Progress.Pie progress={this.props.app.scanning.progress / 100} size={Window.width - 80 - 60} color='#F98187' borderWidth={0} />
                  </View>
                  <ImageBackground source={Assets.img.pictures.progress_circle_center} style={{
        width: '100%',
        height: '100%',
        resizeMode: 'contain',
        marginTop: 14
      }}>
                    <View style={{
        width: '100%',
        height: '100%',
        alignItems: 'center',
        justifyContent: 'center'
      }}>
                      <View style={{
        alignItems: 'center',
        justifyContent: 'center',
        flexDirection: 'row'
      }}>
                        <Text style={[
        Typography.Medium,
        Typography.Big,
        Typography.DarkGrey,
        {
          fontSize: 60,
          marginLeft: 6
        }
      ]}>{this.props.app.scanning.progress.toFixed(0)}</Text>
                        <Text style={[
        Typography.Medium,
        Typography.Regular,
        Typography.DarkGrey,
        {
          marginTop: 26
        }
      ]}>%</Text>
                      </View>
                      <Text style={[
        Typography.Medium,
        Typography.Little,
        Typography.DarkGrey,
        {
          marginBottom: 32
        }
      ]}>COMPLETED</Text>
                    </View>
                  </ImageBackground>
                </ImageBackground>
              </View>
              <Text style={[
        Typography.Medium,
        Typography.Regular,
        Shape.ModalScanningProcessText,
        {
          marginBottom: 8
        }
      ]}>
                {(Platform.OS === 'ios' ? "Hang tight! Our Nude Bot ðŸ¤–\nis scanning your Camera Roll" : "Hang tight! Our Nude Bot ðŸ¤–\nis scanning your Gallery")}
              </Text>
              <Text style={[Typography.Light, Typography.Little, Shape.ModalScanningProcessText]}>{"(You may continue to use the Nude App by closing this screen)"}</Text>
            </BGGradient>
          </View> : void 0)}
    </View>;
  }

};

Shape = StyleSheet.create({
  Box: {
    position: 'absolute',
    zIndex: 9999,
    top: 0,
    left: 0,
    bottom: 0,
    right: 0,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(0,0,0,.6)'
  },
  ModalLayout: {
    width: '100%',
    height: '100%'
  },
  ModalScanning: {
    position: 'absolute',
    top: 60,
    right: -5,
    width: Window.width / 1.6,
    height: Window.height / 4.5
  },
  ModalPlus: {
    position: 'absolute',
    bottom: 86,
    right: Platform.OS === 'ios' ? (Window.width - Window.width / 1.4) / 2 : 0,
    width: Window.width / 1.4,
    height: Window.height / 4.5
  },
  ModalLoading: {
    width: 64,
    height: 64
  },
  ModalScanningProcess: {
    position: 'absolute',
    top: (Window.height - Window.height / 1.6) / 2,
    right: 40,
    width: Window.width - 80,
    height: Window.height / 1.6,
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 40,
    overflow: 'hidden'
  },
  ModalScanningProcessLoading: {
    marginVertical: 24,
    marginHorizontal: 10,
    width: Window.width - 80 - 60,
    height: Window.width - 80 - 60,
    alignItems: 'center',
    justifyContent: 'center'
  },
  ModalScanningProcessLoadingCircle: {
    position: 'absolute',
    top: -1,
    left: 0,
    right: 0,
    bottom: 0
  },
  ModalScanningProcessClose: {
    position: 'absolute',
    top: 24,
    left: 24,
    width: 20,
    height: 20,
    alignItems: 'center',
    justifyContent: 'center'
  },
  ModalScanningProcessText: {
    textAlign: 'center'
  }
});

export default Hybrid(ModalScreen);

//# sourceMappingURL=modal_screen.js.map
