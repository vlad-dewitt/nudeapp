// Generated by CoffeeScript 2.4.1
var ListItem, ListView, Shape, _class, _class1,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

ListView = _class = class extends PureComponent {
  constructor(props) {
    super(props);
    this.componentDidMount = this.componentDidMount.bind(this);
    this.componentDidUpdate = this.componentDidUpdate.bind(this);
    this.init = this.init.bind(this);
    this.openMedia = this.openMedia.bind(this);
    this.share = this.share.bind(this);
    this.delete = this.delete.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      objects: []
    };
  }

  componentDidMount() {
    boundMethodCheck(this, _class);
    return this.init();
  }

  componentDidUpdate(prevProps, prevState) {
    boundMethodCheck(this, _class);
    if (!_.isEqual(this.props.objects, prevProps.objects)) {
      return this.init();
    } else if (!_.isEqual(this.state.objects, prevState.objects)) {
      return this.init();
    }
  }

  init() {
    var objects;
    boundMethodCheck(this, _class);
    objects = this.props.objects;
    return this.setState({
      objects: objects
    });
  }

  openMedia(number) {
    boundMethodCheck(this, _class);
    Ambry.call('fillMediaViewer', {
      objects: this.state.objects,
      first: number
    });
    return this.props.navigation.navigate('MediaViewer');
  }

  share(object) {
    boundMethodCheck(this, _class);
    return Sharing.shareAsync(object.path);
  }

  delete(object) {
    boundMethodCheck(this, _class);
    return Alert.alert('Are you sure?', 'This action can\'t be undone', [
      {
        text: 'Cancel',
        style: 'cancel'
      },
      {
        text: 'Delete',
        onPress: () => {
          return API.global.removeMedia([object]);
        }
      }
    ]);
  }

  render() {
    boundMethodCheck(this, _class);
    return <View style={Shape.Box}>
      {(this.state.objects.length === 0 ? <ScrollView style={Shape.ScrollBox}>
            <View style={Shape.Empty}>
              <Image source={Assets.img.icons.image} style={{
        width: 96,
        height: 96,
        resizeMode: 'contain',
        marginRight: 10
      }} />
              <Text style={[Typography.Medium, Typography.Big, Typography.Grey, Shape.EmptyText]}>{"No Media Yet"}</Text>
            </View>
          </ScrollView> : <FlatList data={this.state.objects} numColumns={1} initialNumToRender={4} onEndReachedThreshold={.5} renderItem={({item, index}) => {
        return <ListItem object={item} index={index} last={this.state.objects.length - 1 === index} openMedia={this.openMedia} share={this.share} delete={this.delete} />;
      }} keyExtractor={(path, index) => {
        return index.toString();
      }} />)}
    </View>;
  }

};

ListItem = _class1 = class extends PureComponent {
  constructor(props) {
    super(props);
    this.render = this.render.bind(this);
  }

  render() {
    var num, object;
    boundMethodCheck(this, _class1);
    if (!this.props.object) {
      return null;
    } else {
      object = this.props.object;
      num = this.props.index;
      return <View style={{
          ...Shape.ListItem,
          marginBottom: this.props.last ? 125 : 15
        }}>
        <TouchableOpacity style={{
          width: '100%',
          height: Window.width / 1.6
        }} activeOpacity={.5} onPress={this.props.openMedia.bind(this, num)}>
          {(object.type === 'image' ? <Image source={{
          uri: object.path
        }} style={{
          width: '100%',
          height: '100%',
          resizeMode: 'cover'
        }} /> : object.type === 'video' ? <Video source={{
          uri: object.path
        }} rate={1.0} volume={1.0} isMuted={false} resizeMode='cover' shouldPlay={false} isLooping={false} style={{
          width: '100%',
          height: '100%'
        }} /> : void 0)}
          {(object.type === 'video' ? <View style={Shape.ListItemInfo}>
                <View style={{
          position: 'absolute',
          top: 0,
          left: 0,
          bottom: 0,
          right: 0
        }} pointerEvents='box-none'>
                  <Image source={Assets.img.pictures.dark_bottom_gradient} style={{
          width: '100%',
          height: '100%',
          resizeMode: 'stretch'
        }} />
                </View>
                <Image source={Assets.img.icons.video_linear_icon} style={{
          width: 18,
          height: 18,
          resizeMode: 'contain'
        }} />
                <Text style={[Typography.Medium, Typography.Small]}>{(object.duration > 3599999 ? moment(moment.duration(object.duration * 1000)._data).format('h:mm:ss') : moment(moment.duration(object.duration * 1000)._data).format('m:ss'))}</Text>
              </View> : void 0)}
        </TouchableOpacity>
        <View style={Shape.ListItemFooter}>
          <Text style={[Typography.Medium, Typography.Small, Typography.DarkGrey]}>{moment(object.date).fromNow()}</Text>
          <View style={Shape.ListItemFooterRight}>
            <TouchableOpacity style={Shape.ListItemFooterRightIcon} activeOpacity={.5} onPress={this.props.delete.bind(this, object)}>
              <Image source={Assets.img.icons.trash_linear_icon} style={{
          width: 20,
          height: 20,
          resizeMode: 'contain'
        }} />
            </TouchableOpacity>
            <TouchableOpacity style={Shape.ListItemFooterRightIcon} activeOpacity={.5} onPress={this.props.share.bind(this, object)}>
              <Image source={Assets.img.icons.share_linear_icon} style={{
          width: 20,
          height: 20,
          resizeMode: 'contain'
        }} />
            </TouchableOpacity>
          </View>
        </View>
      </View>;
    }
  }

};

Shape = StyleSheet.create({
  Box: {
    flex: 1,
    width: '100%'
  },
  ScrollBox: {
    flex: 1,
    width: '100%'
  },
  Empty: {
    flex: 1,
    marginTop: Window.height / 4,
    alignItems: 'center',
    justifyContent: 'center'
  },
  EmptyText: {
    marginTop: 15,
    textAlign: 'center'
  },
  List: {
    width: '100%',
    flexDirection: 'row',
    flexWrap: 'wrap',
    alignItems: 'center',
    marginBottom: 125
  },
  ListItem: {
    width: Window.width - 20,
    height: Window.width / 1.6 + 52,
    backgroundColor: 'white',
    marginHorizontal: 10,
    marginBottom: 15,
    borderRadius: 4,
    overflow: 'hidden'
  },
  ListItemInfo: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    zIndex: 3,
    width: '100%',
    height: 38,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16
  },
  ListItemFooter: {
    width: '100%',
    height: 52,
    paddingHorizontal: 18,
    backgroundColor: 'white',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between'
  },
  ListItemFooterRight: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  ListItemFooterRightIcon: {
    alignItems: 'center',
    justifyContent: 'center',
    marginLeft: 18
  }
});

export default Hybrid(withNavigation(ListView));

//# sourceMappingURL=list_view.js.map
