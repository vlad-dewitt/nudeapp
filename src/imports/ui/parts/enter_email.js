// Generated by CoffeeScript 2.4.1
var EnterEmail, Shape, _class,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import BGGradient from './sub/bg_gradient';

EnterEmail = _class = class extends PureComponent {
  constructor(props) {
    super(props);
    this.typeEmail = this.typeEmail.bind(this);
    this.submit = this.submit.bind(this);
    this.skip = this.skip.bind(this);
    this.finish = this.finish.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      email: ''
    };
  }

  typeEmail(value) {
    boundMethodCheck(this, _class);
    return this.setState({
      email: value
    });
  }

  submit() {
    var email_address, email_test, email_valid;
    boundMethodCheck(this, _class);
    email_address = this.state.email.toLowerCase().replace(/\s/g, '');
    email_test = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    email_valid = email_test.test(email_address);
    if (email_valid) {
      Ambry.call('setEmailAddress', email_address);
      return this.skip();
    } else {
      return Alert.alert('Warning', 'Please enter a valid email address');
    }
  }

  skip() {
    boundMethodCheck(this, _class);
    return API.server.checkUser(this.state.email.toLowerCase().replace(/\s/g, ''), (res) => {
      if (res.status === 'User Exists and email recognized' || res.status === 'User Exists and email not recognized') {
        Ambry.call('setRestoreUserMode', true);
        return this.finish();
      } else if (res.status === 'User doesn\'t exist and email recognized') {
        return Alert.alert('Error', 'This email addres is already in use. Please try another one');
      } else {
        return this.finish();
      }
    });
  }

  async finish() {
    var Camera_permission_status, FS_permission_status;
    boundMethodCheck(this, _class);
    ({
      status: FS_permission_status
    } = (await Permissions.getAsync(Permissions.CAMERA_ROLL)));
    ({
      status: Camera_permission_status
    } = (await Permissions.getAsync(Permissions.CAMERA)));
    if (FS_permission_status !== 'granted') {
      return this.props.navigation.navigate('AskAccessFS');
    } else if (Camera_permission_status !== 'granted') {
      return this.props.navigation.navigate('AskAccessCamera');
    } else {
      return API.global.checkConnection(async(connected) => {
        if (connected) {
          await API.global.storeUser();
          return API.global.syncUserLocally((res) => {
            return this.props.navigation.navigate('Home');
          });
        } else {
          return Alert.alert('Connection Error', 'Please check your internet connection');
        }
      });
    }
  }

  render() {
    boundMethodCheck(this, _class);
    return <BGGradient colors={['#EDA9A9', '#FFD8C0']}>
      <View style={Shape.Box}>
        <Text style={[Typography.SemiBold, Typography.Big, Shape.Text]}>Your PIN is:</Text>
        <Text style={[Typography.SemiBold, Shape.FullPin, Shape.Text]}>{this.props.app.user.full_pin}</Text>
        <Text style={[Typography.Medium, Typography.Regular, Shape.Text]}>Please Enter Email Address</Text>
        <TextInput style={[Typography.Medium, Typography.Regular, Shape.EmailInput]} onChangeText={this.typeEmail} value={this.state.email} placeholder='Email address...' placeholderTextColor='rgba(255,255,255,.5)' textContentType='emailAddress' autoCompleteType='email' keyboardType='email-address' underlineColorAndroid='transparent' autoCapitalize='none' blurOnSubmit={true} returnKeyType='done' onSubmitEditing={this.submit} />
        <Text style={[Typography.Medium, Typography.Small, Shape.Text]}>{"Your email address is used for passcode reset\nand communication purposes"}</Text>
        <View style={Shape.ButtonsContainer}>
          <Theme.ButtonWhite style={{
        width: Window.width - 80
      }} text='FINISH' color='#F6C3B6' onPress={this.submit} />
          <Text style={[Typography.Small, Typography.White, Shape.Skip]} onPress={this.skip}>SKIP</Text>
        </View>
      </View>
    </BGGradient>;
  }

};

Shape = StyleSheet.create({
  Box: {
    flex: 1,
    marginTop: 70
  },
  Text: {
    textAlign: 'center'
  },
  FullPin: {
    marginTop: 15,
    marginBottom: 40,
    fontSize: 40,
    lineHeight: 40,
    letterSpacing: 2,
    color: 'white'
  },
  EmailInput: {
    width: Window.width - 80,
    marginVertical: 30,
    marginHorizontal: 40,
    paddingVertical: 14,
    paddingHorizontal: 18,
    borderWidth: 1,
    borderColor: 'white',
    borderRadius: 32,
    backgroundColor: 'rgba(255,255,255, .1)',
    alignItems: 'center',
    justifyContent: 'center',
    color: 'white'
  },
  ButtonsContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 60
  },
  Skip: {
    padding: 20
  }
});

export default Hybrid(EnterEmail);

//# sourceMappingURL=enter_email.js.map
