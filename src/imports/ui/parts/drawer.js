// Generated by CoffeeScript 2.4.1
var Drawer, Shape, _class,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import BGGradient from './sub/bg_gradient';

Drawer = _class = class extends PureComponent {
  constructor(props) {
    super(props);
    this.componentDidMount = this.componentDidMount.bind(this);
    this.close = this.close.bind(this);
    this.openPage = this.openPage.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      menu: [
        {
          id: 'home',
          title: 'Home',
          route: 'Home'
        },
        {
          id: 'settings',
          title: 'Settings',
          route: 'Settings'
        },
        {
          id: 'breakin_alerts',
          title: 'Break-in Alerts',
          route: 'BreakInAlerts'
        },
        {
          id: 'help',
          title: 'Help',
          route: 'Help'
        }
      ]
    };
  }

  async componentDidMount() {
    var FS_permission_status;
    boundMethodCheck(this, _class);
    if (this.props.app.user.data.settings.auto_nude_detection) {
      ({
        status: FS_permission_status
      } = (await Permissions.askAsync(Permissions.CAMERA_ROLL)));
      if (FS_permission_status === 'granted') {
        return API.global.startDetection();
      }
    }
  }

  close() {
    boundMethodCheck(this, _class);
    return this.props.navigation.closeDrawer();
  }

  openPage(page) {
    var current_route;
    boundMethodCheck(this, _class);
    current_route = this.props.navigation.state.routes[0].routes[this.props.navigation.state.routes[0].routes.length - 1].routeName;
    if (current_route) {
      if (current_route !== page.route) {
        return this.props.navigation.navigate(page.route);
      } else {
        return this.close();
      }
    } else {
      return this.props.navigation.navigate(page.route);
    }
  }

  render() {
    boundMethodCheck(this, _class);
    return <BGGradient colors={['#EDA9A9', '#FFD8C0']} style={{
        width: '100%'
      }}>
      <View style={Shape.Box}>
        <TouchableOpacity style={Shape.CloseCross} onPress={this.close}>
          <Image source={Assets.img.icons.thin_cross} style={{
        width: '100%',
        height: '100%',
        resizeMode: 'contain'
      }} />
        </TouchableOpacity>
        <View style={Shape.Menu}>
          {this.state.menu.map((item, num) => {
      return <TouchableOpacity key={num} style={Shape.MenuItem} onPress={this.openPage.bind(this, item)}>
                <Text style={[Typography.Big, Typography.Light, Shape.MenuItemTitle]}>{item.title}</Text>
              </TouchableOpacity>;
    })}
        </View>
      </View>
    </BGGradient>;
  }

};

Shape = StyleSheet.create({
  Box: {
    flex: 1,
    width: '100%',
    alignItems: 'flex-start',
    justifyContent: 'center',
    paddingVertical: 30,
    paddingHorizontal: 36
  },
  CloseCross: {
    position: 'absolute',
    width: 22,
    height: 22,
    top: 40,
    left: 30
  },
  MenuItem: {
    marginVertical: 13
  },
  MenuItemTitle: {
    fontSize: 22
  }
});

export default Hybrid(Drawer);

//# sourceMappingURL=drawer.js.map
