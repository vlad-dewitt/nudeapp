// Generated by CoffeeScript 2.4.1
var GridView, Shape, _class,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

GridView = _class = class extends PureComponent {
  constructor(props) {
    super(props);
    this.componentDidMount = this.componentDidMount.bind(this);
    this.componentDidUpdate = this.componentDidUpdate.bind(this);
    this.setSelectModeAvailable = this.setSelectModeAvailable.bind(this);
    this.setSelectModeUnavailable = this.setSelectModeUnavailable.bind(this);
    this.init = this.init.bind(this);
    this.selectObject = this.selectObject.bind(this);
    this.openMedia = this.openMedia.bind(this);
    this.longPress = this.longPress.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      objects: []
    };
  }

  componentDidMount() {
    boundMethodCheck(this, _class);
    this.props.navigation.addListener('willFocus', this.setSelectModeAvailable);
    this.props.navigation.addListener('willBlur', this.setSelectModeUnavailable);
    return this.init();
  }

  componentDidUpdate(prevProps) {
    boundMethodCheck(this, _class);
    if (this.props.app.select_mode.selected_objects !== prevProps.app.select_mode.selected_objects) {
      return this.init();
    } else if (this.props.objects.length !== prevProps.objects.length) {
      return this.init();
    }
  }

  setSelectModeAvailable() {
    boundMethodCheck(this, _class);
    return Ambry.call('setSelectMode', {
      available: true,
      active: false,
      selected_objects: []
    });
  }

  setSelectModeUnavailable() {
    boundMethodCheck(this, _class);
    return Ambry.call('setSelectMode', {
      available: false,
      active: false,
      selected_objects: []
    });
  }

  init() {
    var objects, selected_objects;
    boundMethodCheck(this, _class);
    objects = this.props.objects;
    selected_objects = this.props.app.select_mode.selected_objects;
    return this.setState({
      objects: objects,
      selected_objects: selected_objects
    });
  }

  selectObject(object, number) {
    var selected_objects;
    boundMethodCheck(this, _class);
    if (this.props.app.select_mode.active) {
      selected_objects = this.props.app.select_mode.selected_objects;
      if (!_.findWhere(selected_objects, {
        id: object.id
      })) {
        selected_objects.push(object);
      } else {
        selected_objects = _.without(selected_objects, _.findWhere(selected_objects, {
          id: object.id
        }));
      }
      return Ambry.call('setSelectMode', {
        available: true,
        active: true,
        selected_objects: selected_objects
      });
    } else {
      return this.openMedia(number);
    }
  }

  openMedia(number) {
    boundMethodCheck(this, _class);
    Ambry.call('fillMediaViewer', {
      objects: this.state.objects,
      first: number
    });
    return this.props.navigation.navigate('MediaViewer');
  }

  longPress(object, {
      nativeEvent: event
    }) {
    boundMethodCheck(this, _class);
    if (!this.props.app.select_mode.active) {
      if (event.state === GestureState.ACTIVE) {
        return Ambry.call('setSelectMode', {
          available: true,
          active: true,
          selected_objects: [object]
        });
      }
    }
  }

  render() {
    boundMethodCheck(this, _class);
    return <View style={Shape.Box}>
      <ScrollView style={Shape.ScrollBox}>
        {(this.state.objects.length === 0 ? <View style={Shape.Empty}>
              <Image source={Assets.img.icons.image} style={{
        width: 96,
        height: 96,
        resizeMode: 'contain',
        marginRight: 10
      }} />
              <Text style={[Typography.Medium, Typography.Big, Typography.Grey, Shape.EmptyText]}>{"No Media Yet"}</Text>
            </View> : <View style={Shape.List}>
              {this.state.objects.map((object, num) => {
      var selected;
      selected = _.findWhere(this.state.selected_objects, {
        id: object.id
      });
      return <TouchableOpacity key={num} style={Shape.ListItem} activeOpacity={.7} onPress={this.selectObject.bind(this, object, num)}>
                    <View>
                      {(object.type === 'image' ? <Image source={{
          uri: object.path
        }} style={{
          width: '100%',
          height: '100%',
          resizeMode: 'cover'
        }} /> : object.type === 'video' ? <Video source={{
          uri: object.path
        }} rate={1.0} volume={0} isMuted={false} resizeMode='cover' shouldPlay={false} isLooping={false} style={{
          width: '100%',
          height: '100%'
        }} /> : void 0)}
                      {(object.type === 'video' ? <View style={Shape.ListItemInfo}>
                            <View style={{
          position: 'absolute',
          top: 0,
          left: 0,
          bottom: 0,
          right: 0
        }} pointerEvents='box-none'>
                              <Image source={Assets.img.pictures.dark_bottom_gradient} style={{
          width: '100%',
          height: '100%',
          resizeMode: 'stretch'
        }} />
                            </View>
                            <Image source={Assets.img.icons.video_linear_icon} style={{
          width: 14,
          height: 14,
          resizeMode: 'contain'
        }} />
                            <Text style={[Typography.Medium, Typography.Little]}>{(object.duration > 3599999 ? moment(moment.duration(object.duration * 1000)._data).format('h:mm:ss') : moment(moment.duration(object.duration * 1000)._data).format('m:ss'))}</Text>
                          </View> : void 0)}
                      {(this.props.app.select_mode.active ? selected ? <View style={Shape.ListItemSelection}>
                              <Image source={Assets.img.icons.selected} style={{
          width: 72,
          height: 72,
          resizeMode: 'contain'
        }} />
                            </View> : void 0 : void 0)}
                    </View>
                  </TouchableOpacity>;
    })}
            </View>)}
      </ScrollView>
    </View>;
  }

};

Shape = StyleSheet.create({
  Box: {
    flex: 1,
    width: '100%'
  },
  ScrollBox: {
    flex: 1,
    width: '100%'
  },
  Empty: {
    flex: 1,
    marginTop: Window.height / 4,
    alignItems: 'center',
    justifyContent: 'center'
  },
  EmptyText: {
    marginTop: 15,
    textAlign: 'center'
  },
  List: {
    width: '100%',
    flexDirection: 'row',
    flexWrap: 'wrap',
    alignItems: 'center',
    marginBottom: 125
  },
  ListItem: {
    width: Window.width / 3,
    height: Window.width / 3,
    borderWidth: .5,
    borderColor: '#F5F6F9',
    borderRadius: 4,
    overflow: 'hidden'
  },
  ListItemInfo: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    zIndex: 3,
    width: '100%',
    height: 26,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 8
  },
  ListItemSelection: {
    position: 'absolute',
    zIndex: 10,
    top: 0,
    left: 0,
    bottom: 0,
    right: 0,
    backgroundColor: 'rgba(250, 217, 217, .8)',
    alignItems: 'center',
    justifyContent: 'center'
  }
});

export default Hybrid(withNavigation(GridView));

//# sourceMappingURL=grid_view.js.map
