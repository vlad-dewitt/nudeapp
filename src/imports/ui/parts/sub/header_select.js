// Generated by CoffeeScript 2.4.1
var HeaderSelect, _class,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

HeaderSelect = _class = class extends Component {
  constructor(props) {
    super(props);
    this.shouldComponentUpdate = this.shouldComponentUpdate.bind(this);
    this.componentDidUpdate = this.componentDidUpdate.bind(this);
    this.press = this.press.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      config: this.props.app.select_mode
    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    boundMethodCheck(this, _class);
    if (this.props.app.select_mode !== nextProps.app.select_mode) {
      return true;
    } else if (this.state.config !== nextState.config) {
      return true;
    } else if (this.props.app.data.media.length !== nextProps.app.data.media.length) {
      return true;
    } else {
      return false;
    }
  }

  componentDidUpdate() {
    boundMethodCheck(this, _class);
    return this.setState({
      config: this.props.app.select_mode
    });
  }

  press() {
    boundMethodCheck(this, _class);
    if (this.state.config.active) {
      return Ambry.call('setSelectMode', {
        available: true,
        active: false,
        selected_objects: []
      });
    } else {
      return Ambry.call('setSelectMode', {
        available: true,
        active: true,
        selected_objects: []
      });
    }
  }

  render() {
    boundMethodCheck(this, _class);
    if (this.props.app.data.media.length > 0 && this.props.app.select_mode.available) {
      return <TouchableOpacity onPress={this.press}>
        <Text style={Typography.Small}>{(this.state.config.active ? 'Cancel' : 'Select')}</Text>
      </TouchableOpacity>;
    } else {
      return null;
    }
  }

};

export default Hybrid(withNavigation(HeaderSelect));

//# sourceMappingURL=header_select.js.map
