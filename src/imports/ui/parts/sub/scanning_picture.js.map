{
  "version": 3,
  "file": "scanning_picture.js",
  "sourceRoot": "../../../../..",
  "sources": [
    "coffee/imports/ui/parts/sub/scanning_picture.coffee"
  ],
  "names": [],
  "mappings": ";AAAA,IAAA,eAAA,EAAA,MAAA;EAAA;;AAAA,eAAA,YAAkB,MAAA,QAAc,cAAd;EAChB,WAAa,CAAC,KAAD,CAAA;;QAOb,CAAA,wBAAA,CAAA;QAkBA,CAAA,YAAA,CAAA;QAOA,CAAA,aAAA,CAAA;IA9BE,IAAC,CAAA,KAAD,GACE;MAAA,OAAA,EAAS,IAAI,QAAQ,CAAC,KAAb,CAAmB,EAAnB;IAAT;EAHS;;EAOb,iBAAmB,CAAA,CAAA;;WACjB,WAAA,CAAY,CAAA,CAAA,GAAA;MACV,QAAQ,CAAC,MAAT,CAAgB,IAAC,CAAA,KAAK,CAAC,OAAvB,EACE;QAAA,OAAA,EAAS,CAAT;QACA,QAAA,EAAU,IADV;QAEA,eAAA,EAAiB;MAFjB,CADF,CAIA,CAAC,KAJD,CAAA;aAKA,UAAA,CAAW,CAAA,CAAA,GAAA;eACT,QAAQ,CAAC,MAAT,CAAgB,IAAC,CAAA,KAAK,CAAC,OAAvB,EACE;UAAA,OAAA,EAAS,EAAT;UACA,QAAA,EAAU,IADV;UAEA,eAAA,EAAiB;QAFjB,CADF,CAIA,CAAC,KAJD,CAAA;MADS,CAAX,EAME,IANF;IANU,CAAZ,EAaE,IAbF;EADiB;;EAkBnB,KAAO,CAAA,CAAA;;WACL,KAAK,CAAC,IAAN,CAAW,gBAAX,EACE;MAAA,OAAA,EAAS,IAAT;MACA,IAAA,EAAM;IADN,CADF;EADK;;EAOP,MAAQ,CAAA,CAAA;;IACN,IAAG,IAAC,CAAA,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,MAApB,IAA8B,IAAC,CAAA,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,IAAxB,KAAgC,gBAA9D,IAAkF,IAAC,CAAA,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,IAAxB,KAAgC,YAArH;aACG,CAAA,cAAc,KAAA,CAAM,CAAC;UAAE,OAAA,EAAS,IAAC,CAAA,KAAK,CAAC;QAAlB,CAAD,CAApB;QACE,CAAA,iBAAiB,OAAA,CAAQ,CAAK,CAAI,IAAC,CAAA,KAAK,CAAC,WAAd,GAA+B,IAAC,CAAA,KAAhC,GAAA,MAAF,CAAzB;UACE,CAAA,MAAM,MAAA,CAAO,CAAE,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,gBAAnB,EAAsC,KAAA,CAAM,CAAC;UAAE,KAAA,EAAO,EAAT;UAAa,MAAA,EAAQ,EAArB;UAAyB,UAAA,EAAY;QAArC,CAAD,CAAzD;QADF,EAAA,gBAAA;MADF,EAAA,aAAA,EADH;KAAA,MAAA;aAOE,KAPF;;EADM;;AAjCQ;;AA6ClB,OAAA,QAAe,MAAA,CAAO,eAAP",
  "sourcesContent": [
    "ScanningPicture = class extends PureComponent\n  constructor: (props) ->\n    super props\n    @state =\n      opacity: new Animated.Value .5\n\n\n\n  componentDidMount: =>\n    setInterval =>\n      Animated.timing @state.opacity,\n        toValue: 1\n        duration: 1000\n        useNativeDriver: yes\n      .start()\n      setTimeout () =>\n        Animated.timing @state.opacity,\n          toValue: .5\n          duration: 1000\n          useNativeDriver: yes\n        .start()\n      , 1000\n    , 2000\n\n\n\n  press: =>\n    Ambry.call 'setModalScreen',\n      visible: yes\n      type: 'modal_scanning_process'\n\n\n\n  render: =>\n    if @props.app.scanning.active or @props.app.modal_screen.type is 'modal_scanning' or @props.app.modal_screen.type is 'modal_plus'\n      <Animated.View style={{ opacity: @state.opacity }}>\n        <TouchableOpacity onPress={ if not @props.untouchable then @press }>\n          <Image source={ Assets.img.icons.scanning_picture } style={{ width: 72, height: 32, resizeMode: 'contain' }}/>\n        </TouchableOpacity>\n      </Animated.View>\n    else\n      null\n\n\n\nexport default Hybrid ScanningPicture\n"
  ]
}