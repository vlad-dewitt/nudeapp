// Generated by CoffeeScript 2.4.1
var HeaderImageSelector, _class,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

HeaderImageSelector = _class = class extends Component {
  constructor(props) {
    super(props);
    this.shouldComponentUpdate = this.shouldComponentUpdate.bind(this);
    this.componentDidUpdate = this.componentDidUpdate.bind(this);
    this.press = this.press.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      config: this.props.app.image_selector
    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    boundMethodCheck(this, _class);
    if (this.props.app.image_selector !== nextProps.app.image_selector) {
      return true;
    } else if (this.state.config !== nextState.config) {
      return true;
    } else {
      return false;
    }
  }

  componentDidUpdate() {
    boundMethodCheck(this, _class);
    return this.setState({
      config: this.props.app.image_selector
    });
  }

  press() {
    var objects;
    boundMethodCheck(this, _class);
    if (this.state.config.active) {
      objects = [];
      this.state.config.objects.map((item) => {
        item.type = item.mediaType === 'photo' ? 'image' : 'video';
        return objects.push(item);
      });
      API.global.addMedia({
        import: true
      }, objects);
      Ambry.call('setImageSelector', {
        active: false,
        objects: []
      });
      return this.props.navigation.goBack();
    }
  }

  render() {
    boundMethodCheck(this, _class);
    if (this.props.app.image_selector.objects.length > 0) {
      return <TouchableOpacity onPress={this.press}>
        <Text style={Typography.Small}>Done</Text>
      </TouchableOpacity>;
    } else {
      return null;
    }
  }

};

export default Hybrid(withNavigation(HeaderImageSelector));

//# sourceMappingURL=header_image_selector.js.map
