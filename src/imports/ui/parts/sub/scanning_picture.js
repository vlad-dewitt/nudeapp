// Generated by CoffeeScript 2.4.1
var ScanningPicture, _class,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

ScanningPicture = _class = class extends PureComponent {
  constructor(props) {
    super(props);
    this.componentDidMount = this.componentDidMount.bind(this);
    this.press = this.press.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      opacity: new Animated.Value(.5)
    };
  }

  componentDidMount() {
    boundMethodCheck(this, _class);
    return setInterval(() => {
      Animated.timing(this.state.opacity, {
        toValue: 1,
        duration: 1000,
        useNativeDriver: true
      }).start();
      return setTimeout(() => {
        return Animated.timing(this.state.opacity, {
          toValue: .5,
          duration: 1000,
          useNativeDriver: true
        }).start();
      }, 1000);
    }, 2000);
  }

  press() {
    boundMethodCheck(this, _class);
    return Ambry.call('setModalScreen', {
      visible: true,
      type: 'modal_scanning_process'
    });
  }

  render() {
    boundMethodCheck(this, _class);
    if (this.props.app.scanning.active || this.props.app.modal_screen.type === 'modal_scanning' || this.props.app.modal_screen.type === 'modal_plus') {
      return <Animated.View style={{
          opacity: this.state.opacity
        }}>
        <TouchableOpacity onPress={!this.props.untouchable ? this.press : void 0}>
          <Image source={Assets.img.icons.scanning_picture} style={{
          width: 72,
          height: 32,
          resizeMode: 'contain'
        }} />
        </TouchableOpacity>
      </Animated.View>;
    } else {
      return null;
    }
  }

};

export default Hybrid(ScanningPicture);

//# sourceMappingURL=scanning_picture.js.map
