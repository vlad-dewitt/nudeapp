// Generated by CoffeeScript 2.4.1
var HeaderIdentity, _class,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

HeaderIdentity = _class = class extends PureComponent {
  constructor(props) {
    super(props);
    this.press = this.press.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      identity_hardware: this.props.app.initial_data.identity_hardware,
      identity_enabled: this.props.app.user.data.settings.touch_id_enabled
    };
  }

  press() {
    boundMethodCheck(this, _class);
    return API.global.identify((identified) => {
      if (identified) {
        return this.props.navigation.navigate('Home');
      }
    });
  }

  render() {
    boundMethodCheck(this, _class);
    if (this.state.identity_hardware && this.state.identity_enabled) {
      return <TouchableOpacity onPress={this.press}>
        <Image source={this.state.identity_hardware === 'FINGERPRINT' ? Assets.img.icons.touch_id : Assets.img.icons.face_id} style={{
          width: 36,
          height: 36,
          resizeMode: 'contain'
        }} />
      </TouchableOpacity>;
    } else {
      return null;
    }
  }

};

export default Hybrid(withNavigation(HeaderIdentity));

//# sourceMappingURL=header_identity.js.map
