// Generated by CoffeeScript 2.4.1
var AnimatedGradientHelper, BGGradientAnimated, GradientHelper, Shape, _class, _class1,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

GradientHelper = _class = class extends Component {
  constructor(props) {
    super(props);
    this.render = this.render.bind(this);
  }

  render() {
    boundMethodCheck(this, _class);
    return <LinearGradient colors={[this.props.color1, this.props.color2]} style={Shape.BGGradientAnimated} start={[1, 0]} end={[0, 1]}>
      {this.props.children}
    </LinearGradient>;
  }

};

AnimatedGradientHelper = Animated.createAnimatedComponent(GradientHelper);

BGGradientAnimated = _class1 = class extends Component {
  constructor(props) {
    super(props);
    this.shouldComponentUpdate = this.shouldComponentUpdate.bind(this);
    this.componentDidUpdate = this.componentDidUpdate.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      prevColors: this.props.colors,
      colors: this.props.colors,
      tweener: new Animated.Value(0)
    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    boundMethodCheck(this, _class1);
    if (this.state !== nextState) {
      return true;
    } else if (this.props.colors[0] !== nextProps.colors[0]) {
      return true;
    } else {
      return false;
    }
  }

  componentDidUpdate(prevProps, prevState) {
    boundMethodCheck(this, _class1);
    Animated.spring(this.state.tweener, {
      toValue: 1,
      speed: 1,
      useNativeDriver: true
    }).start();
    if (prevProps.colors[0] !== this.props.colors[0]) {
      return this.setState({
        prevColors: this.state.colors,
        colors: this.props.colors,
        tweener: new Animated.Value(0)
      });
    }
  }

  render() {
    var color1Interp, color2Interp;
    boundMethodCheck(this, _class1);
    color1Interp = this.state.tweener.interpolate({
      inputRange: [0, 1],
      outputRange: [this.state.prevColors[0], this.state.colors[0]]
    });
    color2Interp = this.state.tweener.interpolate({
      inputRange: [0, 1],
      outputRange: [this.state.prevColors[1], this.state.colors[1]]
    });
    return <AnimatedGradientHelper color1={color1Interp} color2={color2Interp}>
      {this.props.children}
    </AnimatedGradientHelper>;
  }

};

Shape = StyleSheet.create({
  BGGradientAnimated: {
    width: Window.width,
    height: Window.height
  }
});

export default Hybrid(BGGradientAnimated);

//# sourceMappingURL=bg_gradient_animated.js.map
