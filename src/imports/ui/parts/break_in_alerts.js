// Generated by CoffeeScript 2.4.1
var BreakInAlerts, Shape, _class,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

BreakInAlerts = _class = class extends PureComponent {
  constructor(props) {
    super(props);
    this.componentDidUpdate = this.componentDidUpdate.bind(this);
    this.deleteAll = this.deleteAll.bind(this);
    this.delete = this.delete.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      breakin_alerts: this.props.app.user.data.breakins
    };
  }

  componentDidUpdate(prevProps) {
    boundMethodCheck(this, _class);
    if (!_.isEqual(this.props.app.user.data.breakins, prevProps.app.user.data.breakins)) {
      return this.setState({
        breakin_alerts: this.props.app.user.data.breakins
      });
    }
  }

  deleteAll() {
    boundMethodCheck(this, _class);
    return Alert.alert("Confirmation", "Are you sure?", [
      {
        text: 'Cancel',
        style: 'cancel'
      },
      {
        text: `Delete ${this.state.breakin_alerts.length} items`,
        onPress: () => {
          return API.global.removeBreakIns(this.state.breakin_alerts);
        }
      }
    ]);
  }

  delete(object) {
    boundMethodCheck(this, _class);
    return API.global.removeBreakIns([object]);
  }

  render() {
    boundMethodCheck(this, _class);
    return <View style={Shape.Box}>
      {(this.state.breakin_alerts.length === 0 ? <View style={Shape.Header}>
            <Text style={[Typography.Small, Typography.Regular, Typography.Grey]}>{"You will be notified here whenever someone attempts to access the nude app with a wrong PIN"}</Text>
          </View> : <View style={Shape.Header}>
            <Text style={[Typography.Medium, Typography.Bigger, Typography.Grey]}>{`${this.state.breakin_alerts.length} break-in attempts`}</Text>
            <TouchableOpacity style={Shape.DeleteAll} activeOpacity={.5} onPress={this.deleteAll}>
              <Image source={Assets.img.icons.trash} style={{
        width: 32,
        height: 32,
        resizeMode: 'contain',
        marginBottom: 5
      }} />
              <Text style={[Typography.Medium, Typography.Little, Typography.Grey]}>Delete all</Text>
            </TouchableOpacity>
          </View>)}
      <ScrollView style={Shape.Content}>
        {(this.state.breakin_alerts.length === 0 ? <View style={Shape.Empty}>
              <Image source={Assets.img.icons.break_in} style={{
        width: 96,
        height: 96,
        resizeMode: 'contain'
      }} />
              <Text style={[Typography.Medium, Typography.Big, Typography.Grey, Shape.EmptyText]}>{"No Attempted\nBreak-Ins Yet"}</Text>
            </View> : <View style={Shape.List}>
              {this.state.breakin_alerts.map((item, num) => {
      return <View key={num} style={Shape.ListItem}>
                    <Image source={{
          uri: item.uri
        }} style={{
          width: 56,
          height: 56,
          resizeMode: 'cover',
          borderRadius: 18,
          overflow: 'hidden'
        }} />
                    <View>
                      <Text style={[Typography.Bolder, Typography.Big, Typography.Grey, Shape.ListItemText, Shape.ListItemPin]}>{item.pin}</Text>
                      <Text style={[Typography.Medium, Typography.Bigger, Typography.Grey, Shape.ListItemText]}>{moment(item.date).format('MMMM D, YYYY')}</Text>
                    </View>
                    <TouchableOpacity activeOpacity={.5} onPress={this.delete.bind(this, item)}>
                      <Image source={Assets.img.icons.trash_2} style={{
          width: 20,
          height: 20,
          resizeMode: 'contain'
        }} />
                    </TouchableOpacity>
                  </View>;
    })}
            </View>)}
      </ScrollView>
    </View>;
  }

};

Shape = StyleSheet.create({
  Box: {
    flex: 1,
    width: '100%'
  },
  Header: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    width: '100%',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#DADBDC',
    backgroundColor: 'white',
    alignItems: 'center',
    justifyContent: 'space-between'
  },
  DeleteAll: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  Content: {
    width: Window.width,
    flex: 1,
    padding: 16,
    backgroundColor: '#F5F6F9'
  },
  Empty: {
    flex: 1,
    marginTop: Window.height / 5.5,
    alignItems: 'center',
    justifyContent: 'center'
  },
  EmptyText: {
    marginTop: 15,
    textAlign: 'center'
  },
  List: {
    marginBottom: 40
  },
  ListItem: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginVertical: 6,
    padding: 20,
    borderRadius: 12,
    backgroundColor: 'white'
  },
  ListItemText: {
    marginVertical: 2.5,
    marginRight: 60,
    textAlign: 'left',
    letterSpacing: 0
  },
  ListItemPin: {
    color: '#D3DDE5'
  }
});

export default Hybrid(BreakInAlerts);

//# sourceMappingURL=break_in_alerts.js.map
