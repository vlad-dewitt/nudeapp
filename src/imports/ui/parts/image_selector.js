// Generated by CoffeeScript 2.4.1
var ImageSelector, ImageTile, Shape, _class, _class1,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

ImageSelector = _class = class extends PureComponent {
  constructor(props) {
    super(props);
    this.componentDidMount = this.componentDidMount.bind(this);
    this.componentDidUpdate = this.componentDidUpdate.bind(this);
    this.componentWillUnmount = this.componentWillUnmount.bind(this);
    this.getPhotos = this.getPhotos.bind(this);
    this.processImages = this.processImages.bind(this);
    this.selectImage = this.selectImage.bind(this);
    this.render = this.render.bind(this);
    this.state = {
      objects: [],
      selected: {},
      after: null,
      has_next_page: true
    };
  }

  componentDidMount() {
    boundMethodCheck(this, _class);
    return this.getPhotos();
  }

  componentDidUpdate(prevProps, prevState) {
    var selectedPhotos;
    boundMethodCheck(this, _class);
    if (this.state.selected !== prevState.selected) {
      selectedPhotos = this.state.objects.filter((item, index) => {
        return this.state.selected[index];
      });
      return Ambry.call('setImageSelector', {
        active: true,
        objects: selectedPhotos
      });
    }
  }

  componentWillUnmount() {
    boundMethodCheck(this, _class);
    return Ambry.call('setImageSelector', {
      active: false,
      objects: []
    });
  }

  getPhotos() {
    var params;
    boundMethodCheck(this, _class);
    params = {
      first: 120,
      mediaType: ['photo', 'video'],
      sortBy: ['creationTime']
    };
    if (this.state.after) {
      params.after = this.state.after;
    }
    if (!this.state.has_next_page) {
      return false;
    } else {
      return MediaLibrary.getAssetsAsync(params).then((res) => {
        return this.processImages(res);
      });
    }
  }

  processImages(images) {
    boundMethodCheck(this, _class);
    if (this.state.after === images.endCursor) {

    } else {
      return this.setState({
        objects: [...this.state.objects, ...images.assets],
        after: images.endCursor,
        has_next_page: images.hasNextPage
      });
    }
  }

  selectImage(index) {
    var newSelected;
    boundMethodCheck(this, _class);
    newSelected = {...this.state.selected};
    if (newSelected[index]) {
      delete newSelected[index];
    } else {
      newSelected[index] = true;
    }
    if (!newSelected) {
      newSelected = {};
    }
    return this.setState({
      selected: newSelected
    });
  }

  render() {
    boundMethodCheck(this, _class);
    return <View style={Shape.Box}>
      <FlatList data={this.state.objects} numColumns={4} initialNumToRender={40} onEndReachedThreshold={.5} renderItem={({item, index}) => {
        return <ImageTile object={item} index={index} selected={this.state.selected[index] ? true : false} selectImage={this.selectImage} />;
      }} keyExtractor={(path, index) => {
        return index;
      }} onEndReached={this.getPhotos} extraData={this.state.selected} />
    </View>;
  }

};

ImageTile = _class1 = class extends PureComponent {
  constructor(props) {
    super(props);
    this.render = this.render.bind(this);
  }

  render() {
    boundMethodCheck(this, _class1);
    if (!this.props.object) {
      return null;
    } else {
      return <TouchableOpacity activeOpacity={.7} onPress={this.props.selectImage.bind(this, this.props.index)}>
        <View>
          <Image style={{
          width: Dimensions.get('window').width / 4,
          height: Dimensions.get('window').width / 4
        }} source={{
          uri: this.props.object.uri
        }} />
          {(this.props.object.mediaType === 'video' ? <View style={{
          position: 'absolute',
          zIndex: 10,
          width: 24,
          height: 24,
          bottom: 4,
          right: 6,
          alignItems: 'center',
          justifyContent: 'center'
        }}>
                <Image source={Assets.img.icons.video_linear_icon} style={{
          width: '100%',
          height: '100%',
          resizeMode: 'contain'
        }} />
              </View> : void 0)}
          {(this.props.selected ? <View style={{
          position: 'absolute',
          zIndex: 10,
          top: 0,
          left: 0,
          bottom: 0,
          right: 0,
          backgroundColor: 'rgba(250, 217, 217, .8)',
          alignItems: 'center',
          justifyContent: 'center'
        }}>
                <Image source={Assets.img.icons.selected} style={{
          width: 64,
          height: 64,
          resizeMode: 'contain'
        }} />
              </View> : void 0)}
        </View>
      </TouchableOpacity>;
    }
  }

};

Shape = StyleSheet.create({
  Box: {
    flex: 1,
    width: '100%'
  }
});

export default Hybrid(withNavigation(ImageSelector));

//# sourceMappingURL=image_selector.js.map
